@using CoreAdminWeb.Model.User
@using CoreAdminWeb.Helpers
@using CoreAdminWeb.Model
@using CoreAdminWeb.Model.Settings
@using CoreAdminWeb.Services.Files
@using CoreAdminWeb.Services.Settings
@using CoreAdminWeb.Services.Users
@using CoreAdminWeb.Providers
@using CoreAdminWeb.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components
@inherits LayoutComponentBase
@inject IJSRuntime JsRuntime
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

<div class="bg-[#f9fbfd] dark:bg-dark">
    <div class="bg-black min-h-[220px] sm:min-h-[250px] bg-bottom fixed hidden w-full -z-50 detached-img" style="background-image: url('assets/images/bg-main.png');"></div>

    <div x-cloak class="fixed inset-0 bg-black/60 dark:bg-dark/90 z-[999] lg:hidden" :class="{'hidden' : !$store.app.sidebar}" @click="ToggleSidebar">
    </div>

    <div class="flex mx-auto main-container">
        <div class="flex-1 main-content">
            <Topbar OnLogout="Logout" CurrentUser="currentUser" Logo="Logo" IsAuthenticated="isAuthenticated"></Topbar>
            <div class="h-[calc(100vh-60px)] relative overflow-y-auto overflow-x-hidden p-4 detached-content">
             
                @Body


                <Footer></Footer>
            </div>
        </div>
    </div>
</div>
<MudPopoverProvider />
@code {
    private bool isLoading = true;
    private bool isAuthenticated = false;
    private UserModel currentUser;
    [Inject]
    private AlertService AlertService { get; set; }
    [Inject]
    private ISettingService SettingService { get; set; }
    [Inject]
    private IUserService UserService { get; set; }
    [Inject]
    private IFileService FileService { get; set; }
    private SettingModel? Setting { get; set; }
    private FileModel? Logo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();
          
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in initialization: {ex.Message}");
            // Only navigate if not already on signin page
            var currentUri = NavigationManager?.Uri ?? "";
            if (!currentUri.Contains("/signin"))
            {
                NavigationManager?.NavigateTo("/signin");
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckAuth();
            await LoadSettings();
            if(!isAuthenticated && !NavigationManager.Uri.Contains("/record-detail-page"))
            {
                NavigationManager?.NavigateTo("/news");
            }
            StateHasChanged();
        }
    }
    

    private async Task CheckAuth()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

            if (isAuthenticated)
            {
                var resUser = await UserService.GetCurrentUserAsync();
                if (resUser.IsSuccess)
                {
                    currentUser = resUser.Data;
                }
            }
        }
        catch (Exception ex)
        {
            AlertService.ShowAlert("Lỗi khi kiểm tra đăng nhập", "error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadSettings()
    {
        try
        {
            var settingResults = await SettingService.GetCurrentSettingAsync();
            if (settingResults.IsSuccess)
            {
                Setting = settingResults.Data;

                if (!string.IsNullOrEmpty(Setting.project_logo))
                {
                    var logoRes = await FileService.GetFileAsync(Setting.project_logo);
                    if (logoRes.IsSuccess)
                    {
                        Logo = logoRes.Data;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading settings: {ex.Message}");
        }
    } 

    private async Task Logout()
    {
        try
        {
            await UserService.LogoutAsync();
            NavigationManager?.NavigateTo("/signin");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error logging out: {ex.Message}");
        }
    }
}