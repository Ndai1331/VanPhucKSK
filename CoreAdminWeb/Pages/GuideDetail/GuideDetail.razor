


@page "/news/{id}"
@using CoreAdminWeb.Services
@using CoreAdminWeb.Services.Users
@using CoreAdminWeb.Shared.Base
@using CoreAdminWeb.Model
@using CoreAdminWeb.Extensions
@using CoreAdminWeb.Model.User
@using CoreAdminWeb.Services.BaseServices
@layout CoreAdminWeb.Shared.MainLayout
@inherits BlazorCoreBase
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

<PageHeader Title="Hướng dẫn" pTitle="Chi tiết hướng dẫn"></PageHeader>
<!-- Start Main Content -->
<div class="flex flex-col gap-4 min-h-[calc(100vh-212px)]">

    <div class="grid grid-cols-1 gap-4 bg-white">
        <div class="flex justify-end items-center mb-4 mt-4">
            <div class="flex gap-2">
                <button class="px-4 py-2 bg-purple text-white rounded hover:bg-purple-dark transition-colors" @onclick="BackToGuide">
                    <i class="ri-arrow-left-line me-1"></i>Quay lại
                </button>
            </div>
        </div>

        <div class="card p-4">
            <div class="grid grid-cols-1 gap-4">
                @if(MainModels != null)
                {
                    <div>
                        <img src="@MainModels.post_images?.filename_disk" class="w-full" alt="">
                    </div>
                    <h2 class="mb-4 text-base font-semibold text-black capitalize dark:text-white/80">@MainModels.title</h2>
                    <div class="text-sm text-gray-500">
                        <p class="mb-2">@MainModels.date_created.ToString("dd/MM/yyyy")</p>
                        <p class="mb-2">@MainModels.view_count</p>
                    </div>
                    @((MarkupString)MainModels.description)
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Inject] AlertService AlertService { get; set; }
    [Inject] IBaseGetService<PostModel> PostService { get; set; }
    [Parameter]
    public string id { get; set; }
    private PostModel MainModels = new();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadPosts();
            StateHasChanged();
        }
    }

    private async Task LoadPosts()
    {
        try
        {
            BuildPaginationQuery(Page, PageSize, "date_created");
            BuilderQuery += $"&filter[_and][0][deleted][_eq]=false";
            BuilderQuery += $"&filter[_and][1][status][_eq]={Model.Base.Status.published.ToString()}";
            BuilderQuery += $"&filter[_and][2][id][_eq]={id}";
            var result = await PostService.GetAllAsync(BuilderQuery);
            if (result.IsSuccess && result.Data != null && result.Data.Count > 0)
            {
                MainModels = result.Data.FirstOrDefault();
            }
            else
            {
                MainModels = new();
            }
        }
        catch (Exception ex)
        {
            AlertService.ShowAlert("Lỗi khi tải: " + ex.Message, "danger");
        }
    }

    private void BackToGuide()
    {
        Navigation.NavigateTo("/guide");
    }
} 