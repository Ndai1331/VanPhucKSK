@page "/"
@using CoreAdminWeb.Services
@using CoreAdminWeb.Services.Users
@using CoreAdminWeb.Shared.Base
@using CoreAdminWeb.Model
@using CoreAdminWeb.Extensions
@using CoreAdminWeb.Model.User
@using CoreAdminWeb.Services.BaseServices
@layout CoreAdminWeb.Shared.MainLayout
@inherits BlazorCoreBase
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

@* <PageHeader Title="Hồ sơ khám sức khỏe" pTitle="Tổng quan sức khỏe và lịch sử khám bệnh của bạn"></PageHeader>
 *@
<!-- Start Main Content -->
<div class="flex flex-col gap-4 min-h-[calc(100vh-212px)]">
    @if (_isLoading)
    {
        <div class="flex justify-center items-center py-12">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
            <span class="ml-3 text-slate-600">Đang tải dữ liệu...</span>
        </div>
    }
    else
    {
        <div class="grid grid-cols-1 gap-4">
            <!-- Dashboard Statistics -->
            <div class="grid grid-cols-1 gap-4 sm:grid-cols-2 xl:grid-cols-4 mb-6">
                <div class="p-5 rounded shadow-sm bg-purple text-white">
                    <div class="text-center">
                        <i class="fas fa-file-medical fa-2x mb-2"></i>
                        <h4 class="text-2xl font-semibold mb-1">@TotalItems</h4>
                        <p class="mb-0">Tổng số lần khám</p>
                    </div>
                </div>
                <div class="p-5 rounded shadow-sm bg-success text-white">
                    <div class="text-center">
                        <i class="fas fa-calendar-check fa-2x mb-2"></i>
                        <h4 class="text-2xl font-semibold mb-1">@NgayKhamGanNhat?.ToString("dd/MM/yyyy")</h4>
                        <p class="mb-0">Lần khám gần nhất</p>
                    </div>
                </div>
                <div class="p-5 rounded shadow-sm bg-info text-white">
                    <div class="text-center">
                        <i class="fas fa-heartbeat fa-2x mb-2"></i>
                        <h4 class="text-2xl font-semibold mb-1">@(KetLuanGanNhat?.phan_loai_suc_khoe ?? "Chưa có")</h4>
                        <p class="mb-0">Tình trạng sức khoẻ</p>
                    </div>
                </div>
                <div class="p-5 rounded shadow-sm bg-warning text-white">
                    <div class="text-center">
                        <i class="fas fa-clock fa-2x mb-2"></i>
                        <h4 class="text-2xl font-semibold mb-1">@(NgayKhamGanNhat != null ? (NgayKhamGanNhat.Value.AddMonths(6)).ToString("dd/MM/yyyy") : "")</h4>
                        <p class="mb-0">Đến lần khám tiếp theo</p>
                    </div>
                </div>
            </div>

            <!-- Patient Summary -->
            <div class="p-5 bg-white border rounded shadow-sm dark:bg-darklight dark:border-darkborder mb-6">
                <div class="mb-4 pb-3 border-b border-gray-200 dark:border-darkborder">
                    <h5 class="text-lg font-semibold text-slate-800 dark:text-slate-100 mb-0">
                        <i class="fas fa-user-circle me-2"></i>Thông tin bệnh nhân
                    </h5>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <div class="md:col-span-1">
                        <strong>Họ và tên:</strong> <span>@CurrentUser?.last_name @CurrentUser?.first_name</span>
                    </div>
                    <div class="md:col-span-1">
                        <strong>Mã BN:</strong> <span>@CurrentUser?.ma_benh_nhan</span>
                    </div>
                    <div class="md:col-span-1">
                        <strong>Ngày sinh:</strong> <span>@CurrentUser?.ngay_sinh?.ToString("dd/MM/yyyy")</span>
                    </div>
                    <div class="md:col-span-1">
                        <strong>Giới tính:</strong> <span>@CurrentUser?.gioi_tinh?.GetDescription()</span>
                    </div>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mt-4">
                    <div class="md:col-span-2">
                        <strong>Địa chỉ:</strong> <span>@CurrentUser?.dia_chi</span>
                    </div>
                    <div class="md:col-span-1"> 
                        <strong>SĐT:</strong> <span>@CurrentUser?.so_dien_thoai</span>
                    </div>
                    <div class="md:col-span-1">
                        <strong>Công ty:</strong> <span></span>
                    </div>
                </div>
            </div>

            <!-- Medical Records List -->
            <div class="p-5 bg-white border rounded shadow-sm dark:bg-darklight dark:border-darkborder">
                <div class="mb-4 pb-3 border-b border-gray-200 dark:border-darkborder">
                    <h5 class="text-lg font-semibold text-slate-800 dark:text-slate-100 mb-0">
                        <i class="fas fa-list me-2"></i>Danh sách khám sức khỏe
                    </h5>
                </div>
                <div class="overflow-auto">
                    <MudTable Class="min-w-[640px] text-left w-full" Items="@MainModels" Hover="true" Breakpoint="Breakpoint.None" LoadingProgressColor="Color.Info">
                        <HeaderContent>
                            <MudTh Class="bg-gray-50 dark:bg-gray-700 font-semibold">STT</MudTh>
                            <MudTh Class="bg-gray-50 dark:bg-gray-700 font-semibold">Ngày khám</MudTh>
                            <MudTh Class="bg-gray-50 dark:bg-gray-700 font-semibold">Lượt khám</MudTh>
                            <MudTh Class="bg-gray-50 dark:bg-gray-700 font-semibold">Ngày lập sổ</MudTh>
                            <MudTh Class="bg-gray-50 dark:bg-gray-700 font-semibold">Người lập</MudTh>
                            <MudTh Class="bg-gray-50 dark:bg-gray-700 font-semibold">Trạng thái</MudTh>
                            <MudTh Class="bg-gray-50 dark:bg-gray-700 font-semibold">Thao tác</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="STT">@(MainModels.IndexOf(context) + 1)</MudTd>
                            <MudTd DataLabel="Ngày khám">@context.ngay_kham?.ToString("dd/MM/yyyy")</MudTd>
                            <MudTd DataLabel="Lượt khám">@context.ma_luot_kham</MudTd>
                            <MudTd DataLabel="Ngày lập sổ">@context.ngay_lap_so?.ToString("dd/MM/yyyy")</MudTd>
                            <MudTd DataLabel="Người lập">@context.nguoi_lap</MudTd>
                            <MudTd DataLabel="Trạng thái">
                                <span class="inline-flex items-center rounded shadow-sm text-xs justify-center px-2 py-1 @GetStatusBadgeClass(context.status.ToString())">
                                    @context.status.GetDescription()
                                </span>
                            </MudTd>
                            <MudTd DataLabel="Thao tác">
                                <button class="px-3 py-1.5 text-xs font-medium text-white bg-purple rounded shadow hover:bg-purple transition-colors" @onclick="@(() => ViewRecordDetail(context))">
                                    <i class="ri-eye-line me-1"></i>Xem chi tiết
                                </button>
                            </MudTd>
                        </RowTemplate>
                        <NoRecordsContent>
                            <div class="text-center py-8">
                                <p class="text-slate-500 dark:text-slate-400">Chưa có hồ sơ khám bệnh nào</p>
                            </div>
                        </NoRecordsContent>
                    </MudTable>
                </div>
                
                <div class="w-full grid grid-cols-1 pb-2">
                    <div class="flex items-center justify-between p-4">
                        <div class="flex items-center gap-2">
                            <span>Hiển thị</span>
                            <select class="form-select" @bind="PageSize" @bind:event="oninput" @onchange="async (e) => await OnPageSizeChanged(LoadMedicalRecords)">
                                <option value="10">10</option>
                                <option value="25">25</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                            </select>
                            <span>mục</span>
                        </div>
                        <div class="flex items-center gap-2">

                            <div>
                                <ul class="inline-flex my-2 -space-x-px list-inside">
                                    <li><MudLink Href="#" Class="px-3 py-2 bg-white border cursor-not-allowed ltr:ml-0 rtl:mr-0 ltr:rounded-l-lg rtl:rounded-r-lg text-black/50 border-black/10 dark:bg-transparent dark:text-darkmuted dark:border-darkborder" @onclick="async (e) => await PreviousPage(LoadMedicalRecords)" disabled="@(Page <= 1)">Trước</MudLink></li>
                                    @{
                                        var startPage = Math.Max(1, Page - 1);
                                        var endPage = Math.Min(TotalPages, Page + 1);

                                        // Always show first page
                                        <li>
                                            <a href="#"
                                                class="px-3 py-2 text-black  border border-black/10 hover:bg-purple hover:text-white dark:bg-transparent dark:text-white dark:border-darkborder dark:hover:bg-purple dark:hover:text-white dark:hover:border-purple @(Page == 1 ? "bg-purple text-white" : "bg-white")"
                                                @onclick="async (e) => await SelectedPage(1, LoadMedicalRecords)">1</a>
                                        </li>

                                        // Show ellipsis if needed
                                        if (startPage > 2)
                                        {
                                            <li><span class="px-3 py-2">...</span></li>
                                        }

                                        // Show pages around current page
                                        for (int i = startPage; i <= endPage; i++)
                                        {
                                            if (i > 1 && i < TotalPages)
                                            {   
                                                var currentPage = i; // Local variable to avoid closure issues
                                                <li>
                                                    <a href="#"
                                                        class="px-3 py-2 text-black  border border-black/10
                                                        hover:bg-purple hover:text-white dark:bg-transparent
                                                        dark:text-white dark:border-darkborder dark:hover:bg-purple
                                                        dark:hover:text-white dark:hover:border-purple @(Page == i ? "bg-purple text-white" : "bg-white")"
                                                        @onclick="async (e) => await SelectedPage(currentPage, LoadMedicalRecords)">@i</a>
                                                </li>
                                            }
                                        }

                                        // Show ellipsis if needed
                                        if (endPage < TotalPages - 1)
                                        {
                                            <li><span class="px-3 py-2">...</span></li>
                                        }

                                        // Always show last page if there is more than one page
                                        if (TotalPages > 1)
                                        {
                                            <li>
                                                <a href="#"
                                                    class="px-3 py-2 text-black  border border-black/10 hover:bg-purple hover:text-white dark:bg-transparent dark:text-white dark:border-darkborder dark:hover:bg-purple dark:hover:text-white dark:hover:border-purple @(Page == TotalPages ? "bg-purple text-white" : "bg-white")"
                                                    @onclick="async (e) => await SelectedPage(TotalPages, LoadMedicalRecords)">@TotalPages</a>
                                            </li>
                                        }
                                    }
                                    <li><MudLink Href="#" Class="px-3 py-2 bg-white border cursor-not-allowed ltr:ml-0 rtl:mr-0 ltr:rounded-r-lg rtl:rounded-l-lg text-black/50 border-black/10 dark:bg-transparent dark:text-darkmuted dark:border-darkborder" @onclick="async (e) => await NextPage(LoadMedicalRecords)" disabled="@(Page >= TotalPages)">Sau</MudLink></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div> 
            </div>
            @if(CurrentUser != null)
            {
                    <!-- Action Buttons -->
                    <div class="text-center mt-6">
                        <a href="/settings" class="px-6 p-3 text-white bg-purple rounded shadow hover:bg-purple transition-colors inline-flex items-center">
                            <i class="ri-account-box-line me-1 "></i>Cập nhật thông tin cá nhân
                        </a>
                    </div>
            }
        </div>
    }
</div>

@code {
    [Inject] AlertService AlertService { get; set; }
    [Inject] IUserService UserService { get; set; }
    [Inject] IBaseGetService<SoKhamSucKhoeModel> SoKhamSucKhoeService { get; set; }
    [Inject] IBaseGetService<KhamSucKhoeKetLuanModel> KhamSucKhoeKetLuanService { get; set; }
    
    // State management
    private bool _isLoading = true;
    private bool _hasInitialized = false; // Prevent multiple initializations
    
    // User data
    private UserModel? CurrentUser { get; set; }
    
    // Medical Records
    private List<SoKhamSucKhoeModel> MainModels = new List<SoKhamSucKhoeModel>();
    private DateTime? NgayKhamGanNhat = null;
    private string? MaLuotKhamGanNhat { get; set; }
    private KhamSucKhoeKetLuanModel? KetLuanGanNhat { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_hasInitialized)
        {
            _hasInitialized = true;
            await HandlePostAuthNavigationAsync();
            await InitializePageDataAsync();
        }
    }

    /// <summary>
    /// Initialize all page data with optimized parallel loading
    /// </summary>
    private async Task InitializePageDataAsync()
    {
        try
        {
            _isLoading = true;
            
            // Load user data first
            await LoadCurrentUserAsync();
            
            if (CurrentUser != null)
            {
                // Load medical records and latest exam date in parallel
                var medicalRecordsTask = LoadMedicalRecordsAsync();
                var latestExamTask = LoadLatestExamDateAsync();
                await Task.WhenAll(medicalRecordsTask, latestExamTask);
                
                // Only load conclusion if we have the latest exam code
                if (!string.IsNullOrEmpty(MaLuotKhamGanNhat))
                {
                    await LoadKetLuanAsync();
                }
            }
        }
        catch (Exception ex)
        {
            AlertService.ShowAlert("Lỗi khi tải dữ liệu: " + ex.Message, "danger");
        }
        finally
        {
            _isLoading = false;
            // Use InvokeAsync to avoid render cycle issues
            await InvokeAsync(StateHasChanged);
        }
    }

    /// <summary>
    /// Load current user data with caching
    /// </summary>
    private async Task LoadCurrentUserAsync()
    {
        if (CurrentUser != null) return; // Skip if already loaded
        
        try
        {
            var resUser = await UserService.GetCurrentUserAsync();
            if (resUser.IsSuccess)
            {
                CurrentUser = resUser.Data;
            }
        }
        catch (Exception ex)
        {
            AlertService.ShowAlert("Lỗi khi tải thông tin người dùng: " + ex.Message, "danger");
        }
    }

    /// <summary>
    /// Load medical records with pagination
    /// </summary>
    private async Task LoadMedicalRecordsAsync()
    {
        if (CurrentUser?.ma_benh_nhan == null) return;
        
        try
        {
            // Build query for paginated results
            BuildPaginationQuery(Page, PageSize, "ngay_kham");
            BuilderQuery += $"&filter[_and][0][deleted][_eq]=false";
            BuilderQuery += $"&filter[_and][1][ma_benh_nhan][_eq]={CurrentUser.ma_benh_nhan}";
            
            var result = await SoKhamSucKhoeService.GetAllAsync(BuilderQuery);
            if (result.IsSuccess)
            {
                MainModels = result.Data ?? new List<SoKhamSucKhoeModel>();
                
                if (result.Meta != null)
                {
                    TotalItems = result.Meta.filter_count ?? 0;
                    TotalPages = (int)Math.Ceiling((double)TotalItems / PageSize);
                }
            }
            else
            {
                MainModels = new List<SoKhamSucKhoeModel>();
            }
        }
        catch (Exception ex)
        {
            AlertService.ShowAlert("Lỗi khi tải hồ sơ khám bệnh: " + ex.Message, "danger");
            MainModels = new List<SoKhamSucKhoeModel>();
        }
    }

    /// <summary>
    /// Load latest exam date separately (not affected by pagination)
    /// </summary>
    private async Task LoadLatestExamDateAsync()
    {
        if (CurrentUser?.ma_benh_nhan == null) return;
        
        try
        {
            // Separate query to get only the latest exam date
            string query = $"limit=1&offset=0&sort=-ngay_kham";
            query += $"&filter[_and][0][deleted][_eq]=false";
            query += $"&filter[_and][1][ma_benh_nhan][_eq]={CurrentUser.ma_benh_nhan}";
            query += $"&fields=ngay_kham,ma_luot_kham"; // Only get the date field for performance
            
            var result = await SoKhamSucKhoeService.GetAllAsync(query);
            if (result.IsSuccess && result.Data?.Any() == true)
            {
                NgayKhamGanNhat = result.Data.FirstOrDefault()?.ngay_kham;
                MaLuotKhamGanNhat = result.Data.FirstOrDefault()?.ma_luot_kham;
            }
            else
            {
                NgayKhamGanNhat = null;
                MaLuotKhamGanNhat = null;
            }
        }
        catch (Exception ex)
        {
            AlertService.ShowAlert("Lỗi khi tải ngày khám gần nhất: " + ex.Message, "danger");
            NgayKhamGanNhat = null;
            MaLuotKhamGanNhat = null;
        }
    }

    /// <summary>
    /// Load medical records for pagination (wrapper method)
    /// </summary>
    private async Task LoadMedicalRecords()
    {
        await LoadMedicalRecordsAsync();
        await InvokeAsync(StateHasChanged);
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "published" => "bg-success text-white",
            "draft" => "bg-warning text-white",
            "deleted" => "bg-danger text-white",
            _ => "bg-gray-500 text-white"
        };
    }

    private void ViewRecordDetail(SoKhamSucKhoeModel record)
    {
        Navigation.NavigateTo($"/record-detail-page/{record.ma_luot_kham}");
    }

    private async Task LoadKetLuanAsync()
    {
        if (CurrentUser?.ma_benh_nhan == null) return;
        
        try
        {
            // Separate query to get only the latest exam date
            string query = $"limit=1&offset=0&sort=-id";
            query += $"&filter[_and][0][ma_luot_kham][_eq]={MaLuotKhamGanNhat}";
            query += $"&fields=phan_loai_suc_khoe,ma_luot_kham"; // Only get the date field for performance
            
            var result = await KhamSucKhoeKetLuanService.GetAllAsync(query);
            if (result.IsSuccess && result.Data?.Any() == true)
            {
                KetLuanGanNhat = result.Data.FirstOrDefault();
            }
            else
            {
                KetLuanGanNhat = null;
            }
        }
        catch (Exception ex)
        {
            AlertService.ShowAlert("Lỗi khi tải kết luận gần nhất: " + ex.Message, "danger");
            KetLuanGanNhat = null;
        }
    }

    private async Task HandlePostAuthNavigationAsync()
    {
        try
        {
            if (!IsAuthenticated)
            {
                await InvokeAsync(() => NavigationManager?.NavigateTo("/news"));
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Navigation error: {ex.Message}");
        }
    }

} 