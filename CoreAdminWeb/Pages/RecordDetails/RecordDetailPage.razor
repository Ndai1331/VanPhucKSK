@page "/record-detail-page/{ma_luot_kham}"
@using CoreAdminWeb.Model
@using CoreAdminWeb.Model.User
@using CoreAdminWeb.Helpers
@using CoreAdminWeb.Services.Users
@using CoreAdminWeb.Services.BaseServices
@using CoreAdminWeb.Shared.Base
@using CoreAdminWeb.Extensions
@using CoreAdminWeb.Services.PDFService
@using Microsoft.Extensions.Configuration
@using System.Linq
@inherits BlazorCoreBase
@inject NavigationManager Navigation
@inject IWebHostEnvironment WebHostEnvironment

<div class="flex flex-col gap-4 min-h-[calc(100vh-212px)]">
    <div class="grid grid-cols-1 gap-4">
        <div class="flex justify-between items-center mb-6">
            <div>
                <h2 class="text-2xl font-semibold text-slate-800 dark:text-slate-100 mb-1">
                    <i class="fas fa-file-medical me-2 text-primary"></i>
                Sổ Khám sức khỏe
                </h2>
                <p class="text-slate-600 dark:text-slate-400 mb-0">Chi tiết lần khám sức khỏe của bạn</p>
            </div>
            <div class="flex gap-2">
                <button class="px-4 py-2 bg-purple text-white rounded hover:bg-purple-dark transition-colors" @onclick="BackToList">
                    <i class="ri-arrow-left-line me-1"></i>Quay lại danh sách
                </button>
                <button class="px-4 py-2 bg-info text-white rounded hover:bg-info-dark transition-colors" 
                        @onclick="PrintRecord" disabled="@_isLoading">
                    <i class="ri-printer-line me-1"></i>In
                </button>
                <button class="px-4 py-2 bg-success text-white rounded hover:bg-success-dark transition-colors" 
                        @onclick="ExportPDF" disabled="@_isLoading">
                    <i class="ri-file-pdf-line me-1"></i>Xuất PDF
                </button>
            </div>
        </div>

        @if (_isLoading)
        {
            <div class="flex justify-center items-center py-12">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
                <span class="ml-3 text-slate-600">Đang tải dữ liệu...</span>
            </div>
        }
        else if(_isShowInputCCCD)
        {
            <div class="card">
                <MudText Typo="Typo.h2" Class="mb-1 text-base font-semibold capitalize text-slate-800 dark:text-slate-100">Nhập CCCD</MudText>
                <div class="space-y-4">
                    <div class="space-y-2">
                        <MudText>CCCD</MudText>
                        <input type="text" class="form-input" placeholder="CCCD" required="" @bind-value="@_so_dinh_danh">
                    </div>
                    <div class="flex flex-wrap gap-3">
                        <MudButton type="button" Class="btn bg-purple border-purple text-white hover:bg-purple/[0.85] hover:border-purple/[0.85]" OnClick="LoadDataWithCccdAsync">Tải dữ liệu</MudButton>
                    </div>
                </div>
            </div>
        }
        else if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
                <strong class="font-bold">Lỗi!</strong>
                <span class="block sm:inline"> @_errorMessage</span>
                <button class="float-right font-bold" @onclick="() => LoadDataAsync()">
                    <i class="ri-refresh-line me-1"></i>Thử lại
                </button>
            </div>
        }
        else
        {

            <!-- Printable Medical Form Content -->
            <div class="p-5 bg-white border rounded shadow-sm dark:bg-darklight dark:border-darkborder" id="medical-form-content">

                
                <!-- Medical Form Header -->
                <div class="ksk-header-container" style="margin-bottom:0;">
                    <div class="ksk-header-logo">
                        <img src="@_logoPath" alt="Logo" class="header-logo" />
                    </div>
                    <div class="ksk-header">
                        <div class="quochoa">CỘNG HÒA XÃ HỘI CHỦ NGHĨA VIỆT NAM</div>
                        <div class="doclap">Độc lập - Tự do - Hạnh phúc</div>
                        <div>-------------</div>
                    </div>
                </div>

                <div class="ksk-title">SỔ KHÁM SỨC KHỎE ĐỊNH KỲ</div>

                <!-- Main Medical Form -->
                <div class="ksk-form">
                    <!-- Patient Information Section -->
                    <div class="ksk-row">
                        <!-- Photo Section -->
                        <div>
                            <div class="ksk-photo" id="profilePhotoContainer">
                                <img id="profilePhoto" src="@_profileImageUrl" alt="Ảnh đại diện" style="width: 100%; height: 100%; object-fit: cover; @(string.IsNullOrEmpty(_profileImageUrl) ? "display:none" : "")" />
                                <span style="@(string.IsNullOrEmpty(_profileImageUrl) ? "" : "display:none")">Ảnh 4x6 cm</span>
                            </div>
                            <div class="ksk-photo-label">(dán ảnh hoặc scan ảnh)</div>
                        </div>
                        
                        <!-- Patient Info -->
                        <div class="ksk-info">
                            <div class="ksk-info-row">
                                <div class="ksk-info-label">1. Họ và tên:</div>
                                <div class="ksk-info-value">@GetUserFullName()</div>
                            </div>
                            <div class="ksk-info-row">
                                <div class="ksk-info-label">2. Giới tính:</div>
                                <div class="ksk-info-value">@(CurrentUser?.gioi_tinh?.GetDescription() ?? "")</div>
                            </div>
                            <div class="ksk-info-row">
                                <div class="ksk-info-label">3. Sinh ngày:</div>
                                <div class="ksk-info-value">@(CurrentUser?.ngay_sinh?.Day.ToString("00") ?? "")</div>
                                <span style="margin: 0 4px;">tháng</span>
                                <div class="ksk-info-value">@(CurrentUser?.ngay_sinh?.Month.ToString("00") ?? "")</div>
                                <span style="margin: 0 4px;">năm</span>
                                <div class="ksk-info-value">@(CurrentUser?.ngay_sinh?.Year.ToString() ?? "")</div>
                            </div>
                            <div class="ksk-info-row">
                                <div class="ksk-info-label">4. Số CCCD/CMND:</div>
                                <div class="ksk-info-value">@CoreHelpers.GetSafeString(CurrentUser?.so_dinh_danh)</div>
                            </div>
                            <div class="ksk-info-row">
                                <div class="ksk-info-label">5. Cấp ngày:</div>
                                <div class="ksk-info-value 70px">@CoreHelpers.FormatDate(CurrentUser?.ngay_cap)</div>
                                <span style="margin: 0 4px;">tại</span>
                                <div class="ksk-info-value">@CoreHelpers.GetSafeString(CurrentUser?.noi_cap)</div>
                            </div>
                            <div class="ksk-info-row">
                                <div class="ksk-info-label">6. Chỗ ở hiện tại:</div>
                                <div class="ksk-info-value">@CoreHelpers.GetSafeString(CurrentUser?.dia_chi)</div>
                            </div>
                            <div class="ksk-info-row">
                                <div class="ksk-info-label">7. Số điện thoại:</div>
                                <div class="ksk-info-value">@CoreHelpers.GetSafeString(CurrentUser?.so_dien_thoai)</div>
                            </div>
                            <div class="ksk-info-row">
                                <div class="ksk-info-label">8. Nghề nghiệp:</div>
                                <div class="ksk-info-value">@CoreHelpers.GetSafeString(KhamSucKhoeNgheNghiepModel?.nghe_nghiep)</div>
                            </div>
                            <div class="ksk-info-row">
                                <div class="ksk-info-label">9. Nơi công tác:</div>
                                <div class="ksk-info-value">@CoreHelpers.GetSafeString(KhamSucKhoeNgheNghiepModel?.noi_cong_tac)</div>
                            </div>
                            <div class="ksk-info-row">
                                <div class="ksk-info-label">10. Ngày vào làm:</div>
                                <div class="ksk-info-value">@CoreHelpers.FormatDate(KhamSucKhoeNgheNghiepModel?.ngay_vao_lam)</div>
                            </div>
                            <div class="ksk-info-row">
                                <div class="ksk-info-label">11. Nghề, công việc trước đây:</div>
                                <div class="ksk-info-value"></div>
                            </div>
                            <div class="ksk-info-row">
                                <div class="ksk-info-label">12. Thời gian làm nghề:</div>
                                <div class="ksk-info-value 30px"></div>
                                <span>tháng, từ</span>
                                <div class="ksk-info-value"></div>
                                <span>đến</span>
                                <div class="ksk-info-value"></div>
                            </div>
                            <div class="ksk-info-row">
                                <div class="ksk-info-label">13. Tiền sử bệnh, tật của gia đình:</div>
                                <div class="ksk-info-value">@(KhamSucKhoeTienSuModels?.Count > 0 ? "Có" : "Không")</div>
                            </div>
                        </div>
                    </div>

                    <!-- Note -->
                    <div class="ksk-note">
                        <strong>* Lưu ý:</strong> Trường hợp đối tượng KSK có CCCD gắn chip hoặc có số định danh công dân đã thực hiện kết nối với cơ sở dữ liệu quốc gia, phần HÀNH CHÍNH nếu trên chỉ cần ghi mục (1) Họ và tên, (3) Ngày tháng năm sinh, (4) Số định danh công dân.
                    </div>

                    <!-- Disease History Table -->
                    <div class="ksk-table-wrap">
                        <table class="ksk-table">
                            <thead>
                                <tr>
                                    <th>Tên bệnh</th>
                                    <th>Phát hiện năm</th>
                                    <th>Bệnh nghề nghiệp</th>
                                    <th>Năm phát hiện bệnh nghề nghiệp</th>
                                </tr>
                            </thead>
                            <tbody>
                            @if(KhamSucKhoeTienSuModels != null)
                            {
                                @foreach (var item in KhamSucKhoeTienSuModels)
                                {
                                    <tr>
                                        <td class="ls-cell-small">@item.ten_benh</td>
                                        <td class="ls-cell-small">@item.nam_phat_hien</td>
                                        <td class="ls-cell-small">@item.benh_nghe_nghiep</td>
                                        <td class="ls-cell-small">@item.nam_phat_hien_benh_nghe_nghiep</td>
                                    </tr>
                                }
                            }
                            </tbody>
                        </table>
                    </div>

                    <!-- Signature Section -->
                    <div class="ksk-signature-row">
                        <div class="ksk-signature-box">
                            Người lao động xác nhận<br>
                            <small>(Ký và ghi rõ họ, tên)</small><br><br><br>
                            <strong>@GetUserFullName()</strong>
                        </div>
                        <div class="ksk-signature-box">
                            ... ngày @DateTime.Now.Day tháng @DateTime.Now.Month năm @DateTime.Now.Year<br>
                            Người lập sổ KSK định kỳ<br>
                            <small>(Ký và ghi rõ họ, tên)</small><br><br><br>
                            <strong></strong>
                        </div>
                    </div>
                </div>

                <!-- Medical Examination Section -->
                <div class="ksk-form" style="margin-top: 32px;">
                    <div class="ksk-title">KHÁM SỨC KHỎE ĐỊNH KỲ</div>
                    
                    <!-- I. Medical History -->
                    <div class="mb-6">
                        <div class="font-bold mb-2">I. TIỀN SỬ BỆNH, TẬT <span class="font-normal italic">(Bác sỹ khám sức khỏe hỏi và ghi chép)</span></div>
                        
                        @if (CurrentUser?.gioi_tinh != null && CurrentUser?.gioi_tinh == Enums.GioiTinh.Nu && KhamSucKhoeSanPhuKhoaModel != null)
                        {
                            <div class="mb-4">
                                <div class="font-bold">Tiền sử sản phụ khoa (Đối với nữ): Có</div>
                                <div class="ml-4 space-y-1 text-sm">
                                    <div>- Bắt đầu thấy kinh nguyệt năm bao nhiêu tuổi: @KhamSucKhoeSanPhuKhoaModel?.tuoi_bat_dau_kinh</div>
                                    <div>- Tính chất kinh nguyệt: @KhamSucKhoeSanPhuKhoaModel?.tinh_chat_kinh</div>
                                    <div>Chu kỳ kinh: @KhamSucKhoeSanPhuKhoaModel?.chu_ky_kinh ngày, Lượng kinh: @KhamSucKhoeSanPhuKhoaModel?.luong_kinh ml</div>
                                    <div>Đau bụng kinh: @CoreHelpers.GetBooleanDisplay(KhamSucKhoeSanPhuKhoaModel?.dau_bung_kinh)</div>
                                    <div>Đã lập gia đình: @CoreHelpers.GetBooleanDisplay(KhamSucKhoeSanPhuKhoaModel?.da_lap_gia_dinh, "Có", "Chưa")</div>
                                    <div>PARA: @KhamSucKhoeSanPhuKhoaModel?.para</div>
                                    <div>Số lần mổ sản, phụ khoa: @KhamSucKhoeSanPhuKhoaModel?.so_lan_mo_san_phu_khoa @(string.IsNullOrEmpty(KhamSucKhoeSanPhuKhoaModel?.mo_san_phu_khoa_ghi_ro) ? "/ Chưa" : $"Có {KhamSucKhoeSanPhuKhoaModel?.mo_san_phu_khoa_ghi_ro}")</div>
                                    <div>Có áp dụng BPTT không: @(KhamSucKhoeSanPhuKhoaModel?.ap_dung_bptt == true ? $"Có {KhamSucKhoeSanPhuKhoaModel?.ap_dung_bptt}" : "Không")</div>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- II. Physical Examination -->
                    <div class="mb-6">
                        <div class="font-bold mb-2">II. KHÁM THỂ LỰC</div>
                        <div class="ml-4 space-y-1">
                            <div>Chiều cao: @KhamSucKhoeTheLucModel?.chieu_cao cm; Cân nặng: @KhamSucKhoeTheLucModel?.can_nang kg; Chỉ số BMI: @KhamSucKhoeTheLucModel?.bmi</div>
                            <div>Mạch: @KhamSucKhoeTheLucModel?.mach lần/phút; Huyết áp: @KhamSucKhoeTheLucModel?.huyet_ap mmHg</div>
                            <div>Phân loại thể lực: @KhamSucKhoeTheLucModel?.phan_loai</div>
                        </div>
                    </div>

                    <!-- III. Clinical Examination -->
                    <div class="mb-6">
                        <div class="font-bold mb-2">III. KHÁM LÂM SÀNG</div>
                        <div class="text-sm mb-4">Phải khám đầy đủ các nội dung theo chuyên khoa để khẳng định có/không có bệnh, tật theo quy định tại Quyết định...</div>
                        
                        <div class="ksk-table-wrap">
                            <table class="ksk-table ksk-table-2">
                                <thead>
                                    <tr>
                                        <th rowspan="2">STT</th>
                                        <th colspan="2">Nội dung khám</th>
                                        <th rowspan="2">Họ tên và chữ ký của Bác sỹ chuyên khoa</th>
                                    </tr>
                                    <tr>
                                        <th style="border: 1px solid #000;">Kết luận</th>
                                        <th style="border: 1px solid #000;">Kết quả</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Nội khoa -->
                                    <tr><td colspan="4"><b>Nội khoa</b></td></tr>
                                    <tr>
                                        <td rowspan="2">a</td>
                                        <td><i>Tuần hoàn</i></td>
                                        <td class="ls-cell-small">@CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.kq_nk_tuan_hoan)</td>
                                        <td class="ls-doctor-cell" rowspan="2">
                                            @RenderSignature(KhamSucKhoeChuyenKhoaModel?.chu_ky_tuan_hoan, KhamSucKhoeChuyenKhoaModel?.chu_ky_tuan_hoan, "tuan_hoan", 100, 50)
                                            @CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.bs_tuan_hoan)
                                            </td>
                                    </tr>
                                    <tr>
                                        <td>Phân loại</td>
                                        <td class="ls-cell-small">@CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.pl_nk_tuan_hoan)</td>
                                    </tr>
                                    <tr>
                                        <td rowspan="2">b</td>
                                        <td><i>Hô hấp</i></td>
                                        <td class="ls-cell-small">@CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.kq_nk_ho_hap)</td>
                                        <td class="ls-doctor-cell" rowspan="2">
                                            @RenderSignature(KhamSucKhoeChuyenKhoaModel?.chu_ky_ho_hap, KhamSucKhoeChuyenKhoaModel?.chu_ky_ho_hap, "ho_hap", 100, 50)
                                            @CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.bs_ho_hap)
                                            </td>
                                    </tr>
                                    <tr>
                                        <td>Phân loại</td>
                                        <td class="ls-cell-small">@CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.pl_nk_ho_hap)</td>
                                    </tr>
                                    <tr>
                                        <td rowspan="2">c</td>
                                        <td><i>Tiêu hóa</i></td>
                                        <td class="ls-cell-small">@CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.kq_nk_tieu_hoa)</td>
                                        <td class="ls-doctor-cell" rowspan="2">
                                            @RenderSignature(KhamSucKhoeChuyenKhoaModel?.chu_ky_tieu_hoa, KhamSucKhoeChuyenKhoaModel?.chu_ky_tieu_hoa, "tieu_hoa", 100, 50)
                                            @CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.bs_tieu_hoa)
                                            </td>
                                    </tr>
                                    <tr>
                                        <td>Phân loại</td>
                                        <td class="ls-cell-small">@CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.pl_nk_tieu_hoa)</td>
                                    </tr>
                                    <tr>
                                        <td rowspan="2">d</td>
                                        <td><i>Thận-Tiết niệu</i></td>
                                        <td class="ls-cell-small">@CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.kq_nk_than_tiet_nieu)</td>
                                        <td class="ls-doctor-cell" rowspan="2">
                                            @RenderSignature(KhamSucKhoeChuyenKhoaModel?.chu_ky_than_tiet_nieu, KhamSucKhoeChuyenKhoaModel?.chu_ky_than_tiet_nieu, "than_tiet_nieu", 100, 50)
                                            @CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.bs_than_tiet_nieu)
                                            </td>
                                    </tr>
                                    <tr>
                                        <td>Phân loại</td>
                                        <td class="ls-cell-small">@CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.pl_nk_than_tiet_nieu)</td>
                                    </tr>
                                    <tr>
                                        <td rowspan="2">đ</td>
                                        <td><i>Nội tiết</i></td>
                                        <td class="ls-cell-small">@CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.kq_nk_noi_tiet)</td>
                                        <td class="ls-doctor-cell" rowspan="2">
                                            @RenderSignature(KhamSucKhoeChuyenKhoaModel?.chu_ky_noi_tiet, KhamSucKhoeChuyenKhoaModel?.chu_ky_noi_tiet, "noi_tiet", 100, 50)
                                            @CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.bs_noi_tiet)
                                            </td>
                                    </tr>
                                    <tr>
                                        <td>Phân loại</td>
                                        <td class="ls-cell-small">@CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.pl_nk_noi_tiet)</td>
                                    </tr>
                                    <tr>
                                        <td rowspan="2">e</td>
                                        <td><i>Cơ-xương-khớp</i></td>
                                        <td class="ls-cell-small">@CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.kq_nk_co_xuong_khop)</td>
                                        <td class="ls-doctor-cell" rowspan="2">
                                            @RenderSignature(KhamSucKhoeChuyenKhoaModel?.chu_ky_co_xuong_khop, KhamSucKhoeChuyenKhoaModel?.chu_ky_co_xuong_khop, "co_xuong_khop", 100, 50)
                                            @CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.bs_co_xuong_khop)
                                            </td>
                                    </tr>
                                    <tr>
                                        <td>Phân loại</td>
                                        <td class="ls-cell-small">@CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.pl_nk_co_xuong_khop)</td>
                                    </tr>
                                    <tr>
                                        <td rowspan="2">g</td>
                                        <td><i>Thần kinh</i></td>
                                        <td class="ls-cell-small">@CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.kq_nk_than_kinh)</td>
                                        <td class="ls-doctor-cell" rowspan="2">
                                            @RenderSignature(KhamSucKhoeChuyenKhoaModel?.chu_ky_than_kinh, KhamSucKhoeChuyenKhoaModel?.chu_ky_than_kinh, "than_kinh", 100, 50)
                                            @CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.bs_than_kinh)
                                            </td>
                                    </tr>
                                    <tr>
                                        <td>Phân loại</td>
                                        <td class="ls-cell-small">@CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.pl_nk_than_kinh)</td>
                                    </tr>
                                    <!-- Ngoại khoa, Da liễu -->
                                    <tr><td colspan="4"><b>Ngoại khoa, Da liễu</b></td></tr>
                                    <tr>
                                        <td rowspan="2">a</td>
                                        <td><i>Ngoại khoa</i></td>
                                        <td class="ls-cell-small">@CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.kq_ngoai_khoa)</td>
                                        <td class="ls-doctor-cell" rowspan="2">
                                            @RenderSignature(KhamSucKhoeChuyenKhoaModel?.chu_ky_ngoai_khoa, KhamSucKhoeChuyenKhoaModel?.chu_ky_ngoai_khoa, "ngoai_khoa", 100, 50)
                                            @CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.bs_ngoai_khoa)
                                            </td>
                                    </tr>
                                    <tr>
                                        <td>Phân loại</td>
                                        <td class="ls-cell-small">@CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.pl_ngoai_khoa)</td>
                                    </tr>
                                    <tr>
                                        <td rowspan="2">b</td>
                                        <td><i>Da liễu</i></td>
                                        <td class="ls-cell-small">@CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.kq_da_lieu)</td>
                                        <td class="ls-doctor-cell" rowspan="2">
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>Phân loại</td>
                                        <td class="ls-cell-small">@CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.pl_da_lieu)</td>
                                    </tr>
                                    <!-- Sản phụ khoa -->
                                    <tr><td colspan="4"><b>Sản phụ khoa</b></td></tr>
                                    <tr>
                                        <td rowspan="2">a</td>
                                        <td><i>Sản phụ khoa</i></td>
                                        <td class="ls-cell-small">@CoreHelpers.GetSafeString(KhamSucKhoeSanPhuKhoaModel?.ket_qua)</td>
                                        <td class="ls-doctor-cell" rowspan="2">
                                            @RenderSignature(KhamSucKhoeSanPhuKhoaModel?.chu_ky, KhamSucKhoeSanPhuKhoaModel?.chu_ky, "san_phu_khoa", 100, 50)
                                            @CoreHelpers.GetSafeString(KhamSucKhoeSanPhuKhoaModel?.nguoi_ket_luan)
                                            </td>
                                    </tr>
                                    <tr>
                                        <td>Phân loại</td>
                                        <td class="ls-cell-small">@CoreHelpers.GetSafeString(KhamSucKhoeSanPhuKhoaModel?.phan_loai)</td>
                                    </tr>
                                    <!-- Mắt -->
                                    <tr><td colspan="4"><b>Mắt</b></td></tr>
                                    <tr>
                                        <td rowspan="2">a</td>
                                        <td><i>Kết quả khám thị lực</i></td>
                                        <td>Không kính: Mắt phải @CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.thi_luc_khong_kinh_phai) Mắt trái @CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.thi_luc_khong_kinh_trai) | Có kính: Mắt phải @CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.thi_luc_co_kinh_phai) Mắt trái @CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.thi_luc_co_kinh_trai)</td>
                                        <td class="ls-doctor-cell" rowspan="2">
                                            @RenderSignature(KhamSucKhoeChuyenKhoaModel?.chu_ky_mat, KhamSucKhoeChuyenKhoaModel?.chu_ky_mat, "mat", 100, 50)
                                            @CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.bs_mat)
                                            </td>
                                    </tr>
                                    <tr>
                                        <td>Phân loại</td>
                                        <td class="ls-cell-small">@CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.pl_mat)</td>
                                    </tr>
                                    <tr>
                                        <td>b</td>
                                        <td><i>Các bệnh về mắt (nếu có)</i></td>
                                        <td>@CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.benh_mat)</td>
                                        <td></td>
                                    </tr>
                                    <!-- Tai - Mũi - Họng -->
                                    <tr><td colspan="4"><b>Tai - Mũi - Họng</b></td></tr>
                                    <tr>
                                        <td rowspan="2">a</td>
                                        <td><i>Kết quả khám thính lực</i></td>
                                        <td>Tai trái: @CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.tmh_nt_trai) m; Nói thầm @CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.tmh_ntham_trai) m | Tai phải: @CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.tmh_nt_phai) m; Nói thầm @CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.tmh_ntham_phai) m</td>
                                        <td class="ls-doctor-cell" rowspan="2">
                                            @RenderSignature(KhamSucKhoeChuyenKhoaModel?.chu_ky_tmh, KhamSucKhoeChuyenKhoaModel?.chu_ky_tmh, "tmh", 100, 50)
                                            @CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.bs_tmh)
                                            </td>
                                    </tr>
                                    <tr>
                                        <td>Phân loại</td>
                                        <td class="ls-cell-small">@CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.pl_tmh)</td>
                                    </tr>
                                    <tr>
                                        <td>b</td>
                                        <td><i>Các bệnh về tai mũi họng (nếu có)</i></td>
                                        <td>@CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.benh_tai_mui_hong)</td>
                                        <td></td>
                                    </tr>
                                    <!-- Răng - Hàm - Mặt -->
                                    <tr><td colspan="4"><b>Răng - Hàm - Mặt</b></td></tr>
                                    <tr>
                                        <td rowspan="2">a</td>
                                        <td><i>Kết quả khám</i></td>
                                        <td>Hàm trên: @CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.kq_rhm_ham_tren) | Hàm dưới: @CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.kq_rhm_ham_duoi)</td>
                                        <td class="ls-doctor-cell" rowspan="2">
                                            @RenderSignature(KhamSucKhoeChuyenKhoaModel?.chu_ky_rhm, KhamSucKhoeChuyenKhoaModel?.chu_ky_rhm, "rhm", 100, 50)
                                            @CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.bs_rhm)
                                            </td>
                                    </tr>
                                    <tr>
                                        <td>Phân loại</td>
                                        <td class="ls-cell-small">@CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.pl_rhm)</td>
                                    </tr>
                                    <tr>
                                        <td>b</td>
                                        <td><i>Các bệnh về răng hàm mặt (nếu có)</i></td>
                                        <td>@CoreHelpers.GetSafeString(KhamSucKhoeChuyenKhoaModel?.benh_rhm)</td>
                                        <td></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- IV. Laboratory Tests -->
                    <div style="margin-bottom: 24px;">
                        <div style="font-weight: bold; text-align: center; margin-bottom: 8px;">IV. KHÁM CẬN LÂM SÀNG</div>
                        <div style="border: 1px solid #000; padding: 16px;">
                            <div style="margin-bottom: 8px;">* Xét nghiệm huyết học/sinh hóa/X.quang và các xét nghiệm khác khi có chỉ định của bác sỹ:</div>
                            <div style="margin-left: 16px;">
                                <div style="margin-bottom: 8px;">a) Kết quả: @KhamSucKhoeCanLamSanModel.ket_qua_cls</div>
                                <div>b) Đánh giá: @KhamSucKhoeCanLamSanModel.danh_gia_cls</div>
                            </div>
                        </div>
                    </div>

                    <!-- V. Conclusion -->
                    <div style="margin-bottom: 24px;">
                        <div style="font-weight: bold; text-align: center; margin-bottom: 8px;">V. KẾT LUẬN</div>
                        <div style="margin-bottom: 32px;">
                            <div style="margin-bottom: 8px;"><strong>1. Phân loại sức khỏe:<sup>1</sup></strong> @KhamSucKhoeKetLuanModel.phan_loai_suc_khoe</div>
                            <div style="margin-bottom: 8px;"><strong>2. Các bệnh, tật (nếu có):<sup>2</sup></strong> @KhamSucKhoeKetLuanModel.benh_tat_ket_luan</div>
                            <div><strong>3. Đề nghị:</strong> @KhamSucKhoeKetLuanModel.de_nghi</div>
                        </div>
                        
                        <div class="ksk-signature-row">
                            <div style="flex: 1;"></div>
                            <div class="ksk-signature-box">
                                <div><strong>NGƯỜI KẾT LUẬN</strong></div>
                                <small>(Ký, ghi rõ họ tên và đóng dấu)</small>
                                <div style="margin-bottom: 15px;">@KhamSucKhoeKetLuanModel.ngay_ket_luan?.ToString("dd/MM/yyyy")</div>
                                <div class="signature-container">@RenderSignature(KhamSucKhoeKetLuanModel?.chu_ky, KhamSucKhoeKetLuanModel?.chu_ky, "ket_luan", 150, 80)</div>
                                <div><strong>@KhamSucKhoeKetLuanModel.nguoi_ket_luan</strong></div>
                            </div>
                        </div>
                        
                        <div class="ksk-note" style="border-top: 1px solid #333; padding-top: 8px;">
                            <div><sup>1</sup> Phân loại sức khỏe theo quy định của Bộ Y tế.</div>
                            <div><sup>2</sup> Ghi rõ các bệnh, tật, phương án điều trị, phục hồi chức năng hoặc giới thiệu khám chuyên khoa để khám bệnh, chữa bệnh (nếu có).</div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    #region Constants

    private const string DEFAULT_PROFILE_IMAGE = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='120' height='160' viewBox='0 0 120 160'%3E%3Crect width='120' height='160' fill='%23f8f9fa' stroke='%23dee2e6' stroke-width='1'/%3E%3Ctext x='60' y='80' text-anchor='middle' fill='%236c757d' font-size='12'%3EẢnh 4x6 cm%3C/text%3E%3C/svg%3E";
    #endregion

    #region Parameters and Injection

    [Parameter] public string ma_luot_kham { get; set; } = "";
    [Inject] IUserService UserService { get; set; } = null!;
    [Inject] IBaseGetService<SoKhamSucKhoeModel> SoKhamSucKhoeService { get; set; } = null!;
    [Inject] IBaseGetService<KhamSucKhoeCanLamSanModel> KhamSucKhoeCanLamSanService { get; set; } = null!;
    [Inject] IBaseGetService<KhamSucKhoeChuyenKhoaModel> KhamSucKhoeChuyenKhoaService { get; set; } = null!;
    [Inject] IBaseGetService<KhamSucKhoeKetLuanModel> KhamSucKhoeKetLuanService { get; set; } = null!;
    [Inject] IBaseGetService<KhamSucKhoeNgheNghiepModel> KhamSucKhoeNgheNghiepService { get; set; } = null!;
    [Inject] IBaseGetService<KhamSucKhoeSanPhuKhoaModel> KhamSucKhoeSanPhuKhoaService { get; set; } = null!;
    [Inject] IBaseGetService<KhamSucKhoeTheLucModel> KhamSucKhoeTheLucService { get; set; } = null!;
    [Inject] IBaseGetService<KhamSucKhoeTienSuModel> KhamSucKhoeTienSuService { get; set; } = null!;
    [Inject] IPdfService PdfService { get; set; } = null!;
    [Inject] IConfiguration Configuration { get; set; } = null!;

    #endregion

    #region Private Fields

    // Medical record data models
    private SoKhamSucKhoeModel? SoKhamSucKhoeModel { get; set; }
    private KhamSucKhoeCanLamSanModel? KhamSucKhoeCanLamSanModel { get; set; }
    private KhamSucKhoeChuyenKhoaModel? KhamSucKhoeChuyenKhoaModel { get; set; }
    private KhamSucKhoeKetLuanModel? KhamSucKhoeKetLuanModel { get; set; }
    private KhamSucKhoeNgheNghiepModel? KhamSucKhoeNgheNghiepModel { get; set; }
    private KhamSucKhoeSanPhuKhoaModel? KhamSucKhoeSanPhuKhoaModel { get; set; }
    private KhamSucKhoeTheLucModel? KhamSucKhoeTheLucModel { get; set; }
    private List<KhamSucKhoeTienSuModel>? KhamSucKhoeTienSuModels { get; set; }

    private UserModel? CurrentUser { get; set; }
    private string _profileImageUrl = string.Empty;
    private bool _isLoading = true;
    private bool _isShowInputCCCD = false;
    private string? _errorMessage;
    private string _imagesFolder = $"/images/";
    private string _logoPath = $"/images/Logo/logo.png";
    private string _so_dinh_danh = string.Empty;
    private bool _isPublic = false;

    #endregion

    #region Lifecycle Methods

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadDataAsync();
            _imagesFolder += ma_luot_kham;
            _logoPath = $"{Configuration["DrCoreApi:BaseUrlImage"]}/images/Logo/logo.png";
        }
    }
    #endregion

    #region Data Loading Methods

    /// <summary>
    /// Initialize page data with optimized loading and error handling
    /// </summary>
    private async Task InitializePageDataAsync()
    {
        try
        {
            _isLoading = true;
            _errorMessage = null;
            
            // Load user data first
            await LoadUserDataAsync();
            
            if (CurrentUser != null)
            {
                // Load medical data if user is authenticated
                await LoadMedicalDataAsync();
                SetProfileImagePlaceholder();
            }
            else
            {
                // Show CCCD input for public access
                _isShowInputCCCD = true;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Lỗi khi tải dữ liệu: {ex.Message}";
            AlertService?.ShowAlert(_errorMessage, "danger");
        }
        finally
        {
            _isLoading = false;
            // Use InvokeAsync to avoid render cycle issues
            await InvokeAsync(StateHasChanged);
        }
    }

    /// <summary>
    /// Load all medical record data and user information asynchronously
    /// </summary>
    /// <summary>
    /// Load data with CCCD input - optimized version
    /// </summary>
    private async Task LoadDataWithCccdAsync()
    {
        if (string.IsNullOrWhiteSpace(_so_dinh_danh))
        {
            AlertService?.ShowAlert("Vui lòng nhập CCCD", "warning");
            return;
        }

        try
        {
            _isLoading = true;
            _errorMessage = null;
            
            var userResult = await UserService.GetUserByCCCDAsync(_so_dinh_danh);
            if (userResult?.IsSuccess == true && userResult.Data != null)
            {
                CurrentUser = userResult.Data;  
                _isPublic = true;
                
                // Load medical data in parallel
                await LoadMedicalDataAsync();

                // Validate user matches the medical record
                if (SoKhamSucKhoeModel != null && 
                    string.Equals(SoKhamSucKhoeModel.ma_benh_nhan, CurrentUser.ma_benh_nhan, StringComparison.OrdinalIgnoreCase))
                {
                    _isShowInputCCCD = false;
                    SetProfileImagePlaceholder();
                }
                else
                {
                    _isShowInputCCCD = true;
                    AlertService?.ShowAlert("Không tìm thấy mã bệnh nhân với lượt khám này", "danger");
                }
            }
            else
            {
                _errorMessage = $"Không tìm thấy dữ liệu với CCCD: {_so_dinh_danh}";
                AlertService?.ShowAlert(_errorMessage, "danger");
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Lỗi khi tải dữ liệu: {ex.Message}";
            AlertService?.ShowAlert(_errorMessage, "danger");
        }
        finally
        {
            _isLoading = false; 
            // Use InvokeAsync to avoid render cycle issues
            await InvokeAsync(StateHasChanged);
        }
    }

    /// <summary>
    /// Load data asynchronously (wrapper for InitializePageDataAsync)
    /// </summary>
    private async Task LoadDataAsync()
    {
        await InitializePageDataAsync();
    }

    /// <summary>
    /// Load user data with caching
    /// </summary>
    private async Task LoadUserDataAsync()
    {
        if (CurrentUser != null) return; // Skip if already loaded
        
        try
        {
            var userResult = await UserService.GetCurrentUserAsync();
            if (userResult?.IsSuccess == true)
            {
                CurrentUser = userResult.Data;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user data: {ex.Message}");
            // CurrentUser will remain null, triggering CCCD input
        }
    }

    /// <summary>
    /// Load all medical record data in parallel
    /// </summary>
    private async Task LoadMedicalDataAsync()
    {
        string query =$"filter[_and][0][ma_luot_kham][_eq]={ma_luot_kham}";
        // Execute all medical data API calls in parallel for better performance
        var tasks = new[]
        {
            LoadSingleRecordAsync<SoKhamSucKhoeModel>(SoKhamSucKhoeService, query, r => SoKhamSucKhoeModel = r),
            LoadSingleRecordAsync<KhamSucKhoeCanLamSanModel>(KhamSucKhoeCanLamSanService, query, r => KhamSucKhoeCanLamSanModel = r),
            LoadSingleRecordAsync<KhamSucKhoeChuyenKhoaModel>(KhamSucKhoeChuyenKhoaService, query, r => KhamSucKhoeChuyenKhoaModel = r),
            LoadSingleRecordAsync<KhamSucKhoeKetLuanModel>(KhamSucKhoeKetLuanService, query, r => KhamSucKhoeKetLuanModel = r),
            LoadSingleRecordAsync<KhamSucKhoeNgheNghiepModel>(KhamSucKhoeNgheNghiepService, query, r => KhamSucKhoeNgheNghiepModel = r),
            LoadSingleRecordAsync<KhamSucKhoeSanPhuKhoaModel>(KhamSucKhoeSanPhuKhoaService, query, r => KhamSucKhoeSanPhuKhoaModel = r),
            LoadSingleRecordAsync<KhamSucKhoeTheLucModel>(KhamSucKhoeTheLucService, query, r => KhamSucKhoeTheLucModel = r),
            LoadMultipleRecordAsync<KhamSucKhoeTienSuModel>(KhamSucKhoeTienSuService, query, r => KhamSucKhoeTienSuModels = r)
        };

        await Task.WhenAll(tasks);
    }

    /// <summary>
    /// Generic method to load single record type with proper type safety
    /// </summary>
    private async Task LoadSingleRecordAsync<T>(IBaseGetService<T> service, string query, Action<T?> setResult) where T : class
    {
        try
        {
            var result = await service.GetAllAsync(query , _isPublic);
            if (result?.IsSuccess == true && result.Data != null)
            {
                setResult(result.Data.FirstOrDefault());
            }
            else
            {
                setResult(null);
            }
        }
        catch
        {
            setResult(null);
        }
    }
    private async Task LoadMultipleRecordAsync<T>(IBaseGetService<T> service, string query, Action<List<T>?> setResult) where T : class
    {
        try
        {
            var result = await service.GetAllAsync(query);
            if (result?.IsSuccess == true && result.Data != null)
            {
                setResult(result.Data);
            }
            else
            {
                setResult(null);
            }
        }
        catch
        {
            setResult(null);
        }
    }

    /// <summary>
    /// Set profile image placeholder
    /// </summary>
    private void SetProfileImagePlaceholder()
    {
        if (string.IsNullOrEmpty(_profileImageUrl))
        {
            _profileImageUrl = DEFAULT_PROFILE_IMAGE;
        }
    }

    #endregion

    #region UI Event Handlers

    private async Task PrintRecord()
    {
        if (!_isLoading)
        {
            // Sử dụng function mới để chỉ in phần medical form content
            await JsRuntime.InvokeVoidAsync("printMedicalForm");
        }
    }

    private async Task ExportPDF()
    {
        if (_isLoading || CurrentUser == null) return;

        try
        {

            Console.WriteLine("=== Debug ExportPDF - Bắt đầu ===");
            Console.WriteLine($"CurrentUser: {CurrentUser?.first_name} {CurrentUser?.last_name}");

            // Hiển thị thông báo đang xử lý
            AlertService?.ShowAlert("Đang xử lý ảnh chữ ký và tạo PDF, vui lòng đợi...", "info");

            // Lấy HTML content từ JavaScript - giống như chức năng in
            Console.WriteLine("Step 1: Đang lấy HTML từ JavaScript...");
            
            string htmlContent = null;
            try
            {
                // Đợi một chút để đảm bảo DOM đã render xong
                await Task.Delay(100);
                
                // Tăng timeout lên 2 phút để xử lý ảnh base64
                using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(120));
                htmlContent = await JsRuntime.InvokeAsync<string>("getMedicalFormHtml", cts.Token);
                
                Console.WriteLine($"Step 2: HTML content length: {htmlContent?.Length ?? 0}");
            }
            catch (TaskCanceledException ex)
            {
                Console.WriteLine($"ERROR: TaskCancelled - {ex.Message}");
                AlertService?.ShowAlert("Timeout khi lấy nội dung HTML từ JavaScript", "danger");
                return;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"ERROR: JavaScript interop failed - {ex.Message}");
                AlertService?.ShowAlert($"Lỗi JavaScript: {ex.Message}", "danger");
                return;
            }
            
            if (string.IsNullOrEmpty(htmlContent))
            {
                Console.WriteLine("ERROR: HTML content is null or empty!");
                AlertService?.ShowAlert("Không thể lấy nội dung để xuất PDF - HTML content empty", "danger");
                return;
            }

            // Log HTML content details for debugging
            var htmlPreview = htmlContent.Length > 500 ? htmlContent.Substring(0, 500) + "..." : htmlContent;
            Console.WriteLine($"HTML preview (first 500 chars): {htmlPreview}");
            
            // Check for potential problematic content
            var hasImages = htmlContent.Contains("<img");
            var hasSvg = htmlContent.Contains("<svg");
            var hasLargeTable = htmlContent.Contains("ksk-table");
            Console.WriteLine($"HTML analysis: Images={hasImages}, SVG={hasSvg}, LargeTable={hasLargeTable}");
            
            // Log file size in different units
            var sizeKB = htmlContent.Length / 1024.0;
            Console.WriteLine($"HTML size: {htmlContent.Length} chars = {sizeKB:F2} KB");

            // Configure PDF settings
            Console.WriteLine("Step 3: Cấu hình PDF settings...");
            var pdfSettings = new PdfSettings
            {
                FileName = $"{ma_luot_kham}_{DateTime.Now:yyyyMMdd}.pdf",
                PageSize = "A4",
                Orientation = "Portrait",
                MarginTop = 10,
                MarginBottom = 10,
                MarginLeft = 10,
                MarginRight = 10
            };
            Console.WriteLine($"PDF filename: {pdfSettings.FileName}");

            // Generate PDF từ HTML content lấy từ client
            Console.WriteLine("Step 4: Đang tạo PDF với PuppeteerSharp...");
            
            byte[] pdfBytes;
            
            pdfBytes = PdfService.GeneratePdfFromHtml(htmlContent, pdfSettings);

            // Convert to base64 for download
            Console.WriteLine("Step 6: Chuyển đổi PDF sang base64...");
            var base64 = Convert.ToBase64String(pdfBytes);
            var dataUrl = $"data:application/pdf;base64,{base64}";
            Console.WriteLine($"Base64 length: {base64.Length}");

            // Trigger download via JavaScript
            Console.WriteLine("Step 7: Trigger download...");
            await JsRuntime.InvokeVoidAsync("downloadFile", dataUrl, pdfSettings.FileName);
            AlertService?.ShowAlert("Xuất PDF thành công!", "success");

            Console.WriteLine("Step 8: Hoàn thành thành công!");

            // Xóa ảnh chữ ký sau khi export PDF
            try
            {
                // Xóa folder con chứa ảnh của mã lượt khám
                string folderPath = WebHostEnvironment.WebRootPath + _imagesFolder;
                if (Directory.Exists(folderPath))
                {
                    // Xóa tất cả file trong folder
                    var files = Directory.GetFiles(folderPath);
                    foreach (var file in files)
                    {
                        File.Delete(file);
                    }
                    
                    // Xóa folder sau khi xóa hết file
                    Directory.Delete(folderPath);
                    Console.WriteLine($"Step 9: Xóa folder và ảnh chữ ký thành công: {folderPath}");
                }

                // Xóa các ảnh có thể bị tạo nhầm ở thư mục gốc /images/
                string rootImagesPath = Path.Combine(WebHostEnvironment.WebRootPath, "images");
                if (Directory.Exists(rootImagesPath))
                {
                    // Tìm và xóa các file có tên chứa mã lượt khám hoặc tên chữ ký
                    var signatureFiles = Directory.GetFiles(rootImagesPath, "*")
                        .Where(f => Path.GetFileName(f).Contains(ma_luot_kham) || 
                                    Path.GetFileName(f).Contains("ket_luan") ||
                                    Path.GetFileName(f).Contains("tuan_hoan") ||
                                    Path.GetFileName(f).Contains("chu_ky"))
                        .ToArray();
                    
                    foreach (var file in signatureFiles)
                    {
                        File.Delete(file);
                        Console.WriteLine($"Xóa file nhầm: {Path.GetFileName(file)}");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Lỗi khi xóa ảnh: {ex.Message}");
            }
            

            

        }
        catch (Exception ex)
        {
            Console.WriteLine($"=== ERROR in ExportPDF ===");
            Console.WriteLine($"Error type: {ex.GetType().Name}");
            Console.WriteLine($"Error message: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            
            if (ex.InnerException != null)
            {
                Console.WriteLine($"Inner exception: {ex.InnerException.Message}");
            }
            
            var errorMsg = $"Lỗi khi xuất PDF: {ex.Message}";
            AlertService?.ShowAlert(errorMsg, "danger");
        }
        finally
        {
            Console.WriteLine("=== Debug ExportPDF - Kết thúc ===");
        }
    }

    private void BackToList()
    {
        Navigation.NavigateTo("/");
    }

    #endregion

    #region Helper Methods

    /// <summary>
    /// Safe access to user full name
    /// </summary>
    private string GetUserFullName() => 
        CurrentUser != null ? $"{CurrentUser.last_name} {CurrentUser.first_name}".Trim() : string.Empty;

    /// <summary>
    /// Render signature as HTML - either image or text
    /// </summary>
    /// <param name="signatureData">Signature data (hex string or text)</param>
    /// <param name="fallbackText">Fallback text if signature is empty</param>
    /// <param name="fileName">File name for saving image</param>
    /// <param name="maxWidth">Maximum width for signature image</param>
    /// <param name="maxHeight">Maximum height for signature image</param>
    /// <returns>MarkupString containing signature HTML</returns>
    private MarkupString RenderSignature(string? signatureData, string? fallbackText = "", string? fileName = "", int maxWidth = 120, int maxHeight = 60)
    {
        if (string.IsNullOrEmpty(signatureData)) return new MarkupString();
        var html = signatureData.GetSignatureDisplayHtml(fallbackText, fileName, maxWidth, maxHeight,
            WebHostEnvironment.WebRootPath + _imagesFolder,  Configuration["DrCoreApi:BaseUrlImage"]);
        return new MarkupString(html);
    }
    #endregion
}