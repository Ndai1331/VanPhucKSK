@page "/subclinical-result-detail-page/{ma_luot_kham}"
@using CoreAdminWeb.Model
@using CoreAdminWeb.Model.Configuration
@using CoreAdminWeb.Helpers
@using CoreAdminWeb.Model.User
@using CoreAdminWeb.Services.Users
@using CoreAdminWeb.Services.BaseServices
@using CoreAdminWeb.Services.FTP
@using CoreAdminWeb.Shared.Base
@using CoreAdminWeb.Extensions
@using Microsoft.Extensions.Configuration
@using System.Linq
@inherits BlazorCoreBase
@inject NavigationManager Navigation
@inject IWebHostEnvironment WebHostEnvironment
@inject IUserService UserService
@inject IBaseGetService<KhamSucKhoeCanLamSanModel> KhamSucKhoeCanLamSanService
@inject IBaseGetService<SoKhamSucKhoeModel> SoKhamSucKhoeService
@inject IFtpService FtpService
@inject IConfiguration Configuration
@implements IDisposable

<div class="flex flex-col gap-4 min-h-[calc(100vh-212px)]">
    <div class="grid grid-cols-1 gap-4">
        <div class="group-button flex justify-between items-center mb-6">
            <div class="detail-ksk">
                <h2 class="text-2xl font-semibold text-slate-800 dark:text-slate-100 mb-1">
                    <i class="fas fa-file-medical me-2 text-primary"></i>
                   Chi ti·∫øt k·∫øt qu·∫£ kh√°m l√¢m s√†ng
                </h2>
            </div>
            <div class="flex gap-2">
                 <button class="px-4 py-2 bg-purple hover:bg-purple text-white rounded transition-colors shadow-sm" @onclick="BackToList">
                     <i class="ri-arrow-left-line me-1"></i>Quay l·∫°i
                 </button>
             </div>
        </div>

        @if (_isLoading)
        {
            <div class="flex justify-center items-center py-12">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
                <span class="ml-3 text-slate-600">ƒêang t·∫£i d·ªØ li·ªáu...</span>
            </div>
        }
        else if (_isShowInputCCCD)
        {
            <div class="grid grid-cols-1 gap-4 lg:grid-cols-1 2xl:grid-cols-12">
                <div class="gap-6 p-5 bg-white border rounded dark:bg-darklight dark:border-darkborder border-black/10 2xl:col-span-4">

                    <h2 class="mb-4 text-base font-semibold capitalize text-slate-800 dark:text-slate-100">üìò H∆∞·ªõng d·∫´n</h2>

                    <ul class="mb-5">
                        <li class="mb-2">Nh·∫≠p CCCD/ƒêT ƒë·ªÉ xem k·∫øt qu·∫£ kh√°m</li>
                        <li class="mb-2">Th·ªùi gian truy c·∫≠p c√≥ gi·ªõi h·∫°n (@ExpiredResultPage ng√†y), vui l∆∞·ª£ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem chi ti·∫øt</li>
                        <li class="mb-2">Li√™n h·ªá h·ªó tr·ª£ n·∫øu g·∫∑p v∆∞·ªõng m·∫Øc</li>
                    </ul>
                    <hr>
                    <h5 class="mt-4 mb-2">üìû H·ªó tr·ª£ kh√°ch h√†ng</h5>
                    <ul class="list-unstyled">
                        <li class="mb-2"><i class="bi bi-telephone-fill me-2 text-primary"></i><strong>Hotline:</strong> 1900 966 979</li>
                        <li class="mb-2"><i class="bi bi-envelope-fill me-2 text-primary"></i><strong>Email:</strong> <a href="marketing@vanphuc.com">marketing@vanphuc.com</a></li>
                        <li class="mb-2"><i class="bi bi-clock-fill me-2 text-primary"></i><strong>Gi·ªù h·ªó tr·ª£:</strong> 7h ‚Äì 17h</li>
                    </ul>

                </div>
                <div class="gap-6 p-5 bg-white border rounded dark:bg-darklight dark:border-darkborder 2xl:col-span-8 border-black/10">
                    <ul class="mb-4 list-unstyled">
                        <li class="mb-2"><i class="bi bi-telephone-fill me-2 text-primary"></i><strong>H·ªç v√† t√™n:</strong> @(string.IsNullOrEmpty(GetUserFullName()) ? "*****" : CoreHelpers.GetSafeString(GetUserFullName()))</li>
                        <li class="mb-2"><i class="bi bi-telephone-fill me-2 text-primary"></i><strong>M√£ l∆∞·ª£t kh√°m:</strong> @CoreHelpers.GetSafeString(SoKhamSucKhoeModel?.ma_luot_kham)</li>
                        <li class="mb-2"><i class="bi bi-envelope-fill me-2 text-primary"></i><strong>Ng√†y kh√°m:</strong> @CoreHelpers.FormatDate(SoKhamSucKhoeModel?.ngay_kham)</li>
                    </ul>
                    @* <h2 class="mb-4 text-base font-semibold capitalize text-slate-800 dark:text-slate-100">X√°c th·ª±c xem k·∫øt qu·∫£ KSK</h2> *@
                    <MudText Typo="Typo.h2" Class="mb-1 text-base font-semibold capitalize text-slate-800 dark:text-slate-100">Nh·∫≠p CCCD ho·∫∑c s·ªë ƒëi·ªán tho·∫°i</MudText>
                    <div class="space-y-4">
                        <div class="space-y-2">
                            <input type="text" class="form-input" placeholder="CCCD ho·∫∑c SƒêT" required="" @bind-value="@_so_dinh_danh">
                        </div>
                                                 <div class="flex flex-wrap gap-3">
                             <MudButton type="button" Class="btn bg-green-600 hover:bg-green-700 border-green-600 hover:border-green-700 text-white transition-colors shadow-sm" OnClick="LoadDataWithCccdAsync">Xem k·∫øt qu·∫£</MudButton>
                         </div>
                    </div>
                </div>

            </div>


        }
        else if (_expired_result_page)
        {
            <div class="grid grid-cols-1 gap-4 lg:grid-cols-1 2xl:grid-cols-12">
                <div class="gap-6 p-5 bg-white border rounded dark:bg-darklight dark:border-darkborder border-black/10 2xl:col-span-4">

                    <h2 class="mb-4 text-base font-semibold capitalize text-slate-800 dark:text-slate-100">üìò H∆∞·ªõng d·∫´n</h2>

                    <ul class="mb-5">
                        <li class="mb-2">ƒêƒÉng nh·∫≠p ƒë·ªÉ xem k·∫øt qu·∫£ kh√°m b·∫±ng th√¥ng tin ƒë∆∞·ª£c g·ª≠i qua email</li>
                        <li class="mb-2">Th·ªùi gian truy c·∫≠p c√≥ gi·ªõi h·∫°n (@ExpiredResultPage ng√†y)</li>
                        <li class="mb-2">Li√™n h·ªá h·ªó tr·ª£ n·∫øu g·∫∑p v∆∞·ªõng m·∫Øc</li>
                    </ul>
                    <hr>
                    <h5 class="mt-4 mb-2">üìû H·ªó tr·ª£ kh√°ch h√†ng</h5>
                    <ul class="list-unstyled">
                        <li class="mb-2"><i class="bi bi-telephone-fill me-2 text-primary"></i><strong>Hotline:</strong> 1900 966 979</li>
                        <li class="mb-2"><i class="bi bi-envelope-fill me-2 text-primary"></i><strong>Email:</strong> <a href="marketing@vanphuc.com">marketing@vanphuc.com</a></li>
                        <li class="mb-2"><i class="bi bi-clock-fill me-2 text-primary"></i><strong>Gi·ªù h·ªó tr·ª£:</strong> 7h ‚Äì 17h</li>
                    </ul>

                </div>
                <div class="gap-6 p-5 bg-white border rounded dark:bg-darklight dark:border-darkborder 2xl:col-span-8 border-black/10">
                    <h2 class="mb-4 text-base font-semibold capitalize text-slate-800 dark:text-slate-100">Th√¥ng b√°o</h2>
                    <div class="flex items-center gap-2 mb-5 rounded bg-orange-500 shadow-sm">
                         <i class="ri-alert-line me-2"></i>
                         <strong>Th√¥ng b√°o:</strong> Th·ªùi gian xem k·∫øt qu·∫£ ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem chi ti·∫øt.
                     </div>
                    <MudButton type="button" Class="btn mt-4 bg-purple hover:bg-purple text-white transition-colors shadow-sm"
                                OnClick="LoginAsync">ƒêƒÉng nh·∫≠p</MudButton>
                </div>

            </div>
        }
        else if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
                <strong class="font-bold">L·ªói!</strong>
                <span class="block sm:inline"> @_errorMessage</span>
                <button class="float-right font-bold" @onclick="() => LoadDataAsync()">
                    <i class="ri-refresh-line me-1"></i>Th·ª≠ l·∫°i
                </button>
            </div>
        }else
         {
             <div class="grid grid-cols-1 gap-4">
                 <!-- Patient Summary Card -->
                 <div class="bg-white dark:bg-darklight rounded-lg border border-green-200 dark:border-green-800 shadow-lg overflow-hidden">
                     <div class="bg-green-50 dark:bg-green-900/20 px-6 py-4 border-b border-green-200 dark:border-green-800">
                         <h3 class="px-4 text-lg font-semibold text-green-800 dark:text-green-200 flex items-center">
                             <i class="ri-user-line me-2 text-green-600"></i>
                             K·∫øt qu·∫£ kh√°m c·∫≠n l√¢m s√†ng
                         </h3>
                     </div>
                     
                     <div class="p-6">
                         <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                             <!-- Patient Info -->
                             <div class="space-y-3">
                                 <div class="flex items-center">
                                     <i class="fas fa-user me-2 text-green-600"></i>
                                     <div>
                                          <strong>Th√¥ng tin b·ªánh nh√¢n</strong>
                                         <p class="font-medium text-gray-900 dark:text-gray-100">@GetUserFullName()</p>
                                     </div>
                                 </div>
                                 <div class="text-sm text-gray-600 dark:text-gray-400">
                                     <strong>M√£ BN:</strong> @(CurrentUser?.ma_benh_nhan ?? "BN001")
                                 </div>
                                 <div class="text-sm text-gray-600 dark:text-gray-400">
                                     <strong>H·ªç t√™n:</strong> @GetUserFullName()
                                 </div>
                                 <div class="text-sm text-gray-600 dark:text-gray-400">
                                     <strong>C√¥ng ty:</strong> 
                                 </div>
                                 <div class="text-sm text-gray-600 dark:text-gray-400">
                                     <strong>Ch·∫©n ƒëo√°n:</strong> @SoKhamSucKhoeModel?.ChuanDoan
                                 </div>
                             </div>

                             <!-- Exam Info -->
                             <div class="space-y-3">
                                 <div class="flex items-center">
                                     <i class="fas fa-calendar-alt me-2 text-green-600"></i>
                                     <div>
                                         <strong>Th√¥ng tin kh√°m</strong>
                                     </div>
                                 </div>
                                 <div class="text-sm text-gray-600 dark:text-gray-400">
                                     <strong>M√£ l∆∞·ª£t kh√°m:</strong> @(SoKhamSucKhoeModel?.ma_luot_kham ?? ma_luot_kham)
                                 </div>
                                 <div class="text-sm text-gray-600 dark:text-gray-400">
                                     <strong>Ng√†y kh√°m:</strong> @(SoKhamSucKhoeModel?.ngay_kham?.ToString("dd/MM/yyyy") ?? "")
                                 </div>
                                 <div class="text-sm text-gray-600 dark:text-gray-400">
                                     <strong>Ghi ch√∫:</strong> @SoKhamSucKhoeModel?.GhiChu
                                 </div>
                             </div>

                             <!-- Spacer columns -->
                             <div></div>
                             <div></div>
                         </div>
                     </div>
                 </div>

                 <!-- Subclinical Results List -->
                 <div class="bg-white dark:bg-darklight rounded-lg border border-gray-200 dark:border-darkborder shadow-lg overflow-hidden">
                     <div class="bg-green-50 dark:bg-gray-800 px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                         <h3 class="px-4 text-lg font-semibold text-gray-800 dark:text-gray-200 flex items-center">
                             <i class="ri-list-check me-2 text-gray-600"></i>
                             Danh s√°ch k·∫øt qu·∫£ c·∫≠n l√¢m s√†ng
                         </h3>
                     </div>
                     
                    <div class="p-6">
                          @if (KhamSucKhoeCanLamSanModels != null && KhamSucKhoeCanLamSanModels.Any())
                          {
                              <div class="space-y-4" x-data="{ activeAccordion: null }">
                                  @{
                                      var itemIndex = 0;
                                  }
                                  @foreach (var item in KhamSucKhoeCanLamSanModels)
                                  {
                                      var currentIndex = itemIndex++;
                                      <div class="dark:bg-green-900/10 rounded-lg border border-green-200 dark:border-green-800 overflow-hidden shadow-sm">
                                          <!-- Accordion Header -->
                                          <button class="w-full gap-2 px-4 py-4 text-left dark:bg-green-900/10 hover:bg-green-100 dark:hover:bg-green-900/20 border-b border-green-200 dark:border-green-800 flex items-center justify-between transition-colors focus:outline-none focus:ring-2 focus:ring-green-500"
                                                  x-on:click="activeAccordion = activeAccordion === @currentIndex ? null : @currentIndex">
                                              <div class="flex-1">
                                                  <h4 class="font-bold text-green-600 dark:text-green-300 mb-1">
                                                    <i class="ri-list-check-3 me-2 text-green-600 me-2"></i> @item.name</h4>
                                                  <p class="text-sm text-gray-600 dark:text-gray-400">
                                                      M√£ CKS: @item.code | Ng√†y k·∫øt lu·∫≠n: @item.date_created.ToString("dd/MM/yyyy")
                                                  </p>
                                              </div>
                                              <div class="flex items-center space-x-2  bg-green-600 text-white dark:text-green-400 font-medium px-2 py-1 rounded-md">
                                                  <span class="text-sm">Xem chi ti·∫øt</span>
                                                  <i class="ri-arrow-down-s-line text-white dark:text-green-400 transition-transform duration-200"
                                                     x-bind:class="activeAccordion === @currentIndex ? 'rotate-180' : ''"></i>
                                              </div>
                                          </button>
                                          
                                          <!-- Accordion Content -->
                                          <div class="overflow-hidden transition-all duration-300"
                                               x-show="activeAccordion === @currentIndex"
                                               x-transition:enter="transition-all duration-300"
                                               x-transition:enter-start="max-h-0"
                                               x-transition:enter-end="max-h-[1000px]"
                                               x-transition:leave="transition-all duration-300"
                                               x-transition:leave-start="max-h-[1000px]"
                                               x-transition:leave-end="max-h-0">
                                              <div class="p-4 bg-white dark:bg-gray-800">
                                                  @if (!string.IsNullOrEmpty(item.ket_qua_cls))
                                                  {
                                                      <div class="mb-4">
                                                          <h5 class="font-bold dark:text-green-300 mb-2 flex items-center">
                                                              <i class="fas fa-clipboard-check me-2 text-green-600"></i>
                                                              K·∫øt lu·∫≠n:
                                                          </h5>
                                                          <p class="bg-green-50 text-gray-700 dark:text-gray-300 p-3 dark:bg-green-900/20 rounded-md border border-green-200 dark:border-green-800">
                                                              @item.ket_qua_cls
                                                          </p>
                                                      </div>
                                                  }
                                                  
                                                  @if (!string.IsNullOrEmpty(item.file_cls))
                                                  {
                                                      <div class="mb-4">
                                                          <h5 class="font-medium text-green-700 dark:text-green-300 mb-2 flex items-center">
                                                              <i class="fas fa-file-medical me-2 text-green-600"></i>
                                                              N·ªôi dung k·∫øt qu·∫£:
                                                          </h5>
                                                          <div class="bg-white dark:bg-gray-700 rounded-lg p-4 border border-green-200 dark:border-green-800">
                                                              @{
                                                                  // Download file directly from FTP without caching
                                                                  var fileName = Path.GetFileName(item.file_cls);
                                                                  var localPath = GetDirectLocalPath(fileName);
                                                                  _ = DownloadFileDirectlyAsync(fileName);
                                                              }
                                                              
                                                              @if (IsFileAvailableLocally(fileName))
                                                              {
                                                                  <iframe src="@localPath"
                                                                          width="100%"
                                                                          height="600px"
                                                                          class="border rounded-lg border-gray-300 dark:border-gray-600"
                                                                          title="K·∫øt qu·∫£ @item.name"
                                                                          loading="lazy">
                                                                  </iframe>
                                                              }
                                                              else if (IsFileCurrentlyDownloading(fileName))
                                                              {
                                                                  <div class="flex justify-center items-center py-12">
                                                                      <div class="text-center">
                                                                          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-green-600 mx-auto mb-2"></div>
                                                                          <span class="text-gray-600 dark:text-gray-400">ƒêang t·∫£i t·ª´ FTP...</span>
                                                                          <div class="mt-2 text-xs text-gray-500">
                                                                              File: @fileName
                                                                          </div>
                                                                      </div>
                                                                  </div>
                                                              }
                                                              else
                                                              {
                                                                  <div class="flex justify-center items-center py-12">
                                                                      <div class="text-center">
                                                                          <i class="fas fa-file-medical-alt text-3xl mb-2 text-red-400"></i>
                                                                          <span class="text-gray-600 dark:text-gray-400">Kh√¥ng th·ªÉ t·∫£i file</span>
                                                                          <div class="mt-2 text-xs text-gray-500">
                                                                              File: @fileName
                                                                          </div>
                                                                          <button @onclick="async () => await RetryDownload(fileName)" 
                                                                                  class="mt-2 px-3 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600">
                                                                              Th·ª≠ l·∫°i
                                                                          </button>
                                                                      </div>
                                                                  </div>
                                                              }
                                                          </div>
                                                      </div>
                                                  }
                                                  else
                                                  {
                                                      <div class="text-center py-8 text-gray-500 dark:text-gray-400">
                                                          <i class="fas fa-file-medical-alt text-3xl mb-2 text-green-400"></i>
                                                          <p>Kh√¥ng c√≥ k·∫øt qu·∫£ ƒë·ªÉ hi·ªÉn th·ªã</p>
                                                      </div>
                                                  }
                                              </div>
                                          </div>
                                      </div>
                                  }
                              </div>
                          }
                          else
                          {
                              <div class="text-center py-12 text-gray-500 dark:text-gray-400">
                                  <i class="fas fa-file-medical-alt text-4xl mb-4"></i>
                                  <p class="text-lg">Kh√¥ng c√≥ k·∫øt qu·∫£ c·∫≠n l√¢m s√†ng n√†o.</p>
                              </div>
                          }
                      </div>
                 </div>
             </div>
         }

    </div>
</div>

@code {
    #region Constants

    private const string DEFAULT_PROFILE_IMAGE = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='120' height='160' viewBox='0 0 120 160'%3E%3Crect width='120' height='160' fill='%23f8f9fa' stroke='%23dee2e6' stroke-width='1'/%3E%3Ctext x='60' y='80' text-anchor='middle' fill='%236c757d' font-size='12'%3E·∫¢nh 4x6 cm%3C/text%3E%3C/svg%3E";
    private const int ExpiredResultPage = 7; // 7 days
    #endregion

    #region Parameters and Injection

    [Parameter] public string ma_luot_kham { get; set; } = "";

    #endregion

    #region Private Fields

    // Medical record data models
    private List<KhamSucKhoeCanLamSanModel>? KhamSucKhoeCanLamSanModels { get; set; }
    private SoKhamSucKhoeModel? SoKhamSucKhoeModel { get; set; }

    private UserModel? CurrentUser { get; set; }
    private string _profileImageUrl = string.Empty;
    private bool _isLoading = true;
    private bool _isShowInputCCCD = false;
    private string? _errorMessage;
    private string _imagesFolder = $"/images/";
    private string _logoPath = $"/images/Logo/logo.png";
    private string _ftpFolder = $"";
    private string _so_dinh_danh = string.Empty;
    private bool _expired_result_page = false;
    private bool _isPublic = false;

    // Local file cache for CLS results
    private readonly Dictionary<string, string> _localFileCache = new(); // fileName -> local file path
    private readonly Dictionary<string, bool> _downloadingFiles = new(); // track downloading status
    private string _clsImagesFolder => $"/images/cls/{ma_luot_kham}/"; // Local folder for CLS files

    #endregion

    #region Lifecycle Methods

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadDataAsync();
            _logoPath = $"{Configuration["DrCoreApi:BaseUrlImage"]}/images/Logo/logo.png";
        }
    }
    #endregion

    #region Data Loading Methods

    /// <summary>
    /// Initialize page data with optimized loading and error handling
    /// </summary>
    private async Task InitializePageDataAsync()
    {
        try
        {
            _isLoading = true;
            _errorMessage = null;

            // Load user data first
            await LoadUserDataAsync();

            if (CurrentUser != null)
            {
                // Load medical data if user is authenticated
                await LoadKetQuaCanLamSangDataAsync();
                SetProfileImagePlaceholder();
            }
            else
            {
                await LoadSoKhamSucKhoeDataAsync();
                if (SoKhamSucKhoeModel != null && SoKhamSucKhoeModel.ngay_kham != null && DateTime.Now > SoKhamSucKhoeModel.ngay_kham.Value.AddDays(ExpiredResultPage))
                {
                    _expired_result_page = true;
                }
                else
                {
                    _isShowInputCCCD = true;
                }
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"L·ªói khi t·∫£i d·ªØ li·ªáu: {ex.Message}";
            AlertService?.ShowAlert(_errorMessage, "danger");
        }
        finally
        {
            _isLoading = false;
            // Use InvokeAsync to avoid render cycle issues
            await InvokeAsync(StateHasChanged);
        }
    }
    

    private async Task LoadDataWithCccdAsync()
    {
        if (string.IsNullOrWhiteSpace(_so_dinh_danh))
        {
            AlertService?.ShowAlert("Vui l√≤ng nh·∫≠p CCCD", "warning");
            return;
        }

        try
        {
            _isLoading = true;
            _errorMessage = null;

            var userResult = await UserService.GetUserByCCCDAsync(_so_dinh_danh);
            if (userResult?.IsSuccess == true && userResult.Data != null)
            {
                CurrentUser = userResult.Data;
                _isPublic = true;

                // Load medical data in parallel
                await LoadKetQuaCanLamSangDataAsync();

                // Validate user matches the medical record
                if (SoKhamSucKhoeModel != null &&
                    string.Equals(SoKhamSucKhoeModel.ma_benh_nhan, CurrentUser.ma_benh_nhan, StringComparison.OrdinalIgnoreCase))
                {
                    _isShowInputCCCD = false;
                    SetProfileImagePlaceholder();
                }
                else
                {
                    _isShowInputCCCD = true;
                    AlertService?.ShowAlert("Kh√¥ng t√¨m th·∫•y m√£ b·ªánh nh√¢n v·ªõi l∆∞·ª£t kh√°m n√†y", "danger");
                }
            }
            else
            {
                _errorMessage = $"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu v·ªõi CCCD: {_so_dinh_danh}";
                AlertService?.ShowAlert(_errorMessage, "danger");
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"L·ªói khi t·∫£i d·ªØ li·ªáu: {ex.Message}";
            AlertService?.ShowAlert(_errorMessage, "danger");
        }
        finally
        {
            _isLoading = false;
            // Use InvokeAsync to avoid render cycle issues
            await InvokeAsync(StateHasChanged);
        }
    }

    /// <summary>
    /// Load data asynchronously (wrapper for InitializePageDataAsync)
    /// </summary>
    private async Task LoadDataAsync()
    {
        await InitializePageDataAsync();
    }

    /// <summary>
    /// Load user data with caching
    /// </summary>
    private async Task LoadUserDataAsync()
    {
        if (CurrentUser != null) return; // Skip if already loaded

        try
        {
            var userResult = await UserService.GetCurrentUserAsync();
            if (userResult?.IsSuccess == true)
            {
                CurrentUser = userResult.Data;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user data: {ex.Message}");
            // CurrentUser will remain null, triggering CCCD input
        }
        
        // Build FTP folder path based on user and medical record
        if (CurrentUser != null)
        {
            _ftpFolder = $"{CurrentUser.ma_benh_nhan}/{ma_luot_kham}/";
        }
        else
        {
            _ftpFolder = $"{ma_luot_kham}/";
        }
    }

    private async Task LoadKetQuaCanLamSangDataAsync()
    {
        string query = $"filter[_and][0][ma_luot_kham][_eq]={ma_luot_kham}";
        var result = await KhamSucKhoeCanLamSanService.GetAllAsync(query, true);
        if (result?.IsSuccess == true && result.Data != null)
        {
            KhamSucKhoeCanLamSanModels = result.Data;
            
            // Create local folder for CLS files
            EnsureClsImagesFolderExists();
        }
    }

    /// <summary>
    /// Ensure CLS images folder exists
    /// </summary>
    private void EnsureClsImagesFolderExists()
    {
        try
        {
            var physicalPath = Path.Combine(WebHostEnvironment.WebRootPath, "images", "cls", ma_luot_kham);
            if (!Directory.Exists(physicalPath))
            {
                Directory.CreateDirectory(physicalPath);
                Console.WriteLine($"Created CLS images folder: {physicalPath}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating CLS images folder: {ex.Message}");
        }
    }

    /// <summary>
    /// Clean up CLS images folder
    /// </summary>
    private void CleanupClsImagesFolder()
    {
        if (string.IsNullOrEmpty(ma_luot_kham)) return;

        try
        {
            var physicalPath = Path.Combine(WebHostEnvironment.WebRootPath, "images", "cls", ma_luot_kham);
            if (Directory.Exists(physicalPath))
            {
                // Delete all files in the folder
                var files = Directory.GetFiles(physicalPath);
                foreach (var file in files)
                {
                    File.Delete(file);
                }

                // Delete the folder itself
                Directory.Delete(physicalPath);
                Console.WriteLine($"Cleanup: Deleted CLS images folder: {physicalPath}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cleaning up CLS images folder: {ex.Message}");
        }
    }

    /// <summary>
    /// Get debug info for FTP paths
    /// </summary>
    private string GetFtpPathDebugInfo(string filePath)
    {
        var fileName = Path.GetFileName(filePath);
        var paths = new[]
        {
            $"1: {filePath}",
            $"2: {fileName}",
            $"3: {_ftpFolder}{fileName}",
            $"4: {_ftpFolder}{filePath}"
        };
        return string.Join(" | ", paths);
    }
    private async Task LoadSoKhamSucKhoeDataAsync()
    {
        string query = $"filter[_and][0][ma_luot_kham][_eq]={ma_luot_kham}";
        var result = await SoKhamSucKhoeService.GetAllAsync(query, true);
        if (result?.IsSuccess == true && result.Data != null)
        {
            SoKhamSucKhoeModel = result.Data.FirstOrDefault();
        }
    }


    /// <summary>
    /// Set profile image placeholder
    /// </summary>
    private void SetProfileImagePlaceholder()
    {
        if (string.IsNullOrEmpty(_profileImageUrl))
        {
            _profileImageUrl = DEFAULT_PROFILE_IMAGE;
        }
    }

    #endregion

    #region UI Event Handlers
    private void BackToList()
    {
        Navigation.NavigateTo("/");
    }

    private void LoginAsync()
    {
        Navigation.NavigateTo("/signin");
    }

    #endregion

    #region Helper Methods

    /// <summary>
    /// Safe access to user full name
    /// </summary>
    private string GetUserFullName() =>
        CurrentUser != null ? $"{CurrentUser.last_name} {CurrentUser.first_name}".Trim() : string.Empty;

    /// <summary>
    /// Render signature as HTML - either image or text
    /// </summary>
    /// <param name="signatureData">Signature data (hex string or text)</param>
    /// <param name="fallbackText">Fallback text if signature is empty</param>
    /// <param name="fileName">File name for saving image</param>
    /// <param name="maxWidth">Maximum width for signature image</param>
    /// <param name="maxHeight">Maximum height for signature image</param>
    /// <returns>MarkupString containing signature HTML</returns>
    private MarkupString RenderSignature(string? signatureData, string? fallbackText = "", string? fileName = "", int maxWidth = 120, int maxHeight = 60)
    {
        if (string.IsNullOrEmpty(signatureData)) return new MarkupString();
        var html = signatureData.GetSignatureDisplayHtml(fallbackText, fileName, maxWidth, maxHeight,
            WebHostEnvironment.WebRootPath + _imagesFolder + ma_luot_kham, Configuration["DrCoreApi:BaseUrlImage"]);
        return new MarkupString(html);
    }

    #endregion

    #region Dispose Method

    /// <summary>
    /// Clean up resources and delete signature images when component is disposed
    /// </summary>
    public void Dispose()
    {
        try
        {
            // Clean up signature images folder
            CleanupSignatureImages();
            
            // Clean up CLS files folder
            CleanupClsImagesFolder();
            
            // Clear caches
            _localFileCache.Clear();
            _downloadingFiles.Clear();
        }
        catch (Exception ex)
        {
            // Log error but don't throw exception in Dispose
            Console.WriteLine($"Error during dispose cleanup: {ex.Message}");
        }
    }

    /// <summary>
    /// Delete all signature images in the component's folder
    /// </summary>
    private void CleanupSignatureImages()
    {
        if (string.IsNullOrEmpty(ma_luot_kham)) return;

        try
        {
            // Delete specific folder for this medical record
            string folderPath = WebHostEnvironment.WebRootPath + _imagesFolder + $"{ma_luot_kham}";
            if (Directory.Exists(folderPath))
            {
                // Delete all files in the folder
                var files = Directory.GetFiles(folderPath);
                foreach (var file in files)
                {
                    File.Delete(file);
                }

                // Delete the folder itself
                Directory.Delete(folderPath);
                Console.WriteLine($"Cleanup: Deleted signature folder: {folderPath}");
            }

            // Also clean up any stray signature files in root images folder
            string rootImagesPath = Path.Combine(WebHostEnvironment.WebRootPath, "images", ma_luot_kham);
            if (Directory.Exists(rootImagesPath))
            {
                // Find and delete files that might be related to this medical record
                var signatureFiles = Directory.GetFiles(rootImagesPath, "*");

                foreach (var file in signatureFiles)
                {
                    File.Delete(file);
                    Console.WriteLine($"Cleanup: Deleted stray signature file: {Path.GetFileName(file)}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cleaning up signature images: {ex.Message}");
        }
    }

    /// <summary>
    /// Read file content from FTP server as string
    /// </summary>
    private async Task<string> ReadFileFromFTP(string fileName)
    {
        try
        {
            // Use byte download method which has better error handling
            var bytes = await FtpService.DownloadFileAsBytesAsync(fileName);
            if (bytes != null && bytes.Length > 0)
            {
                return System.Text.Encoding.UTF8.GetString(bytes);
            }
            return string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error reading file from FTP: {ex.Message}");
            return string.Empty;
        }
    }

    /// <summary>
    /// Download file from FTP and save to local folder
    /// </summary>
    private async Task<string> DownloadFileFromFtpToLocal(string ftpFileName)
    {
        if (string.IsNullOrEmpty(ftpFileName) || !IsValidFileName(ftpFileName)) return string.Empty;

        var localFileName = Path.GetFileName(ftpFileName);
        var localPath = _clsImagesFolder + localFileName;
        
        // Check if already cached locally
        if (_localFileCache.TryGetValue(ftpFileName, out string? cachedPath))
        {
            return cachedPath;
        }

        // Check if currently downloading
        if (_downloadingFiles.ContainsKey(ftpFileName) && _downloadingFiles[ftpFileName])
        {
            return string.Empty; // Return empty, will show loading
        }

        try
        {
            _downloadingFiles[ftpFileName] = true;
            
            Console.WriteLine($"Downloading FTP file: {ftpFileName}");
            
            // Try different FTP paths
            var pathsToTry = new[]
            {
                $"{CurrentUser?.ma_benh_nhan}/{ma_luot_kham}/{localFileName}",
            };

            byte[]? fileBytes = null;
            string? successfulPath = null;

            foreach (var ftpPath in pathsToTry)
            {
                try
                {
                    Console.WriteLine($"Trying FTP path: {ftpPath}");
                    
                    // Check if file exists first
                    var fileExists = await FtpService.FileExistsAsync(ftpPath);
                    if (!fileExists) return string.Empty;
                    
                    // Download file
                    fileBytes = await FtpService.DownloadFileAsBytesAsync(ftpPath);
                    if (fileBytes != null && fileBytes.Length > 0)
                    {
                        successfulPath = ftpPath;
                        Console.WriteLine($"Successfully downloaded from: {ftpPath} ({fileBytes.Length} bytes)");
                        break;
                    }
                }
                catch (Exception pathEx)
                {
                    Console.WriteLine($"Failed to download from {ftpPath}: {pathEx.Message}");
                }
            }
            
            if (fileBytes != null && fileBytes.Length > 0)
            {
                // Save to local file
                var physicalPath = Path.Combine(WebHostEnvironment.WebRootPath, "images", "cls", ma_luot_kham, localFileName);
                await File.WriteAllBytesAsync(physicalPath, fileBytes);
                
                Console.WriteLine($"Saved local file: {physicalPath}");
                // Cache the local path
                _localFileCache[ftpFileName] = localPath;
                return localPath;
            }
            else
            {
                Console.WriteLine($"Failed to download file: {ftpFileName}");
                _localFileCache[ftpFileName] = string.Empty;
                return string.Empty;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading file from FTP: {ftpFileName}, Error: {ex.Message}");
            _localFileCache[ftpFileName] = string.Empty;
            return string.Empty;
        }
        finally
        {
            _downloadingFiles[ftpFileName] = false;
        }
    }

    /// <summary>
    /// Get local file path for iframe or download from FTP if needed
    /// </summary>
    private async Task<string> GetLocalFileForIframe(string ftpFileName)
    {
        if (string.IsNullOrEmpty(ftpFileName)) return string.Empty;

        try
        {
            // Skip if filename is empty or doesn't look like a file
            if (!IsValidFileName(ftpFileName))
            {
                return ftpFileName; // Return original if not valid
            }
            
            // Download from FTP to local folder
            var localPath = await DownloadFileFromFtpToLocal(ftpFileName);
            
            // Return local path if download successful
            if (!string.IsNullOrEmpty(localPath))
            {
                return localPath;
            }
            
            // Fallback to original filename
            return ftpFileName;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting local file for iframe: {ex.Message}");
            return ftpFileName;
        }
    }

    /// <summary>
    /// Check if filename is valid for FTP loading
    /// </summary>
    private static bool IsValidFileName(string fileName)
    {
        if (string.IsNullOrEmpty(fileName)) return false;
        
        // Check for common file extensions that should be loaded from FTP
        var validExtensions = new[] { ".html", ".htm", ".pdf", ".txt" };
        var extension = Path.GetExtension(fileName).ToLowerInvariant();
        
        return validExtensions.Contains(extension);
    }

    /// <summary>
    /// Get direct local path for file without caching
    /// </summary>
    private string GetDirectLocalPath(string fileName)
    {
        return _clsImagesFolder + fileName;
    }

    /// <summary>
    /// Check if file is available locally
    /// </summary>
    private bool IsFileAvailableLocally(string fileName)
    {
        var physicalPath = Path.Combine(WebHostEnvironment.WebRootPath, "images", "cls", ma_luot_kham, fileName);
        return File.Exists(physicalPath);
    }

    /// <summary>
    /// Check if file is currently downloading
    /// </summary>
    private bool IsFileCurrentlyDownloading(string fileName)
    {
        return _downloadingFiles.ContainsKey(fileName) && _downloadingFiles[fileName];
    }

    /// <summary>
    /// Download file directly from FTP without caching
    /// </summary>
    private async Task DownloadFileDirectlyAsync(string fileName)
    {
        if (IsFileAvailableLocally(fileName) || IsFileCurrentlyDownloading(fileName))
            return;

        await DownloadFileFromFtpToLocal(fileName);
        StateHasChanged(); // Refresh UI after download
    }

    /// <summary>
    /// Retry download for failed files
    /// </summary>
    private async Task RetryDownload(string fileName)
    {
        // Clear any existing cache for this file
        _localFileCache.Remove(fileName);
        _downloadingFiles.Remove(fileName);
        
        // Delete local file if exists
        var physicalPath = Path.Combine(WebHostEnvironment.WebRootPath, "images", "cls", ma_luot_kham, fileName);
        if (File.Exists(physicalPath))
        {
            File.Delete(physicalPath);
        }
        
        // Download again
        await DownloadFileDirectlyAsync(fileName);
    }

    /// <summary>
    /// Get local file loading status for debugging
    /// </summary>
    private string GetFtpLoadingStatus()
    {
        var localCached = _localFileCache.Count;
        var downloading = _downloadingFiles.Count(x => x.Value);
        
        return $"Local: {localCached} files, Downloading: {downloading} files, CLS Folder: '{_clsImagesFolder}'";
    }

    /// <summary>
    /// Clear all local file caches and delete downloaded files
    /// </summary>
    private void ClearFtpCache()
    {
        try
        {
            var localCount = _localFileCache.Count;
            var downloadingCount = _downloadingFiles.Count;
            
            // Clear caches
            _localFileCache.Clear();
            _downloadingFiles.Clear();
            
            // Delete local files
            CleanupClsImagesFolder();
            
            // Recreate folder for future downloads
            EnsureClsImagesFolderExists();
            
            Console.WriteLine($"Cleared local cache: {localCount} files, {downloadingCount} downloading states");
            StateHasChanged(); // Refresh UI
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error clearing local cache: {ex.Message}");
        }
    }



    /// <summary>
    /// Read file content from FTP server as byte array
    /// </summary>
    private async Task<byte[]> ReadFileAsBytesFromFTP(string fileName)
    {
        try
        {
            return await FtpService.DownloadFileAsBytesAsync(fileName);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error reading file bytes from FTP: {ex.Message}");
            return Array.Empty<byte>();
        }
    }


    /// <summary>
    /// List files in FTP directory
    /// </summary>
    private async Task<List<string>> ListFilesFromFTP(string directory = "")
    {
        try
        {
            return await FtpService.ListFilesAsync(directory);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error listing files from FTP: {ex.Message}");
            return new List<string>();
        }
    }

    #endregion
}